<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1078.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1061" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1061" > </text>
<g id="frames">
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__write&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; (250,000 samples, 0.67%)</title><rect x="253.9" y="245" width="7.8" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="256.87" y="255.5" ></text>
</g>
<g >
<title>main (16,750,000 samples, 44.67%)</title><rect x="17.9" y="981" width="527.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="20.87" y="991.5" >main</text>
</g>
<g >
<title>decltype (250,000 samples, 0.67%)</title><rect x="419.1" y="181" width="7.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="422.07" y="191.5" ></text>
</g>
<g >
<title>handle_postmsg (7,750,000 samples, 20.67%)</title><rect x="57.2" y="789" width="243.9" height="15.0" fill="rgb(249,204,49)" rx="2" ry="2" />
<text  x="60.20" y="799.5" >handle_postmsg</text>
</g>
<g >
<title>sock_def_readable (1,000,000 samples, 2.67%)</title><rect x="1119.2" y="901" width="31.5" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1122.20" y="911.5" >so..</text>
</g>
<g >
<title>epoll_ctl (500,000 samples, 1.33%)</title><rect x="25.7" y="773" width="15.8" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="28.73" y="783.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_scan (250,000 samples, 0.67%)</title><rect x="159.5" y="213" width="7.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="162.47" y="223.5" ></text>
</g>
<g >
<title>tcp_rcv_established (2,500,000 samples, 6.67%)</title><rect x="985.5" y="629" width="78.6" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="988.47" y="639.5" >tcp_rcv_e..</text>
</g>
<g >
<title>std::chrono::hh_mm_ss&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::hh_mm_ss (250,000 samples, 0.67%)</title><rect x="387.6" y="261" width="7.9" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="390.60" y="271.5" ></text>
</g>
<g >
<title>decltype (250,000 samples, 0.67%)</title><rect x="293.2" y="661" width="7.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="296.20" y="671.5" ></text>
</g>
<g >
<title>std::chrono::time_zone::_M_get_sys_info (250,000 samples, 0.67%)</title><rect x="175.2" y="549" width="7.9" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="178.20" y="559.5" ></text>
</g>
<g >
<title>void minilog::details::log_generic&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (250,000 samples, 0.67%)</title><rect x="49.3" y="757" width="7.9" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="52.33" y="767.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::unlock (250,000 samples, 0.67%)</title><rect x="65.1" y="741" width="7.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="68.07" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::get_allocator (250,000 samples, 0.67%)</title><rect x="277.5" y="725" width="7.8" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="280.47" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (250,000 samples, 0.67%)</title><rect x="135.9" y="517" width="7.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="138.87" y="527.5" ></text>
</g>
<g >
<title>EpollServer::receiver (13,500,000 samples, 36.00%)</title><rect x="25.7" y="805" width="424.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="28.73" y="815.5" >EpollServer::receiver</text>
</g>
<g >
<title>_raw_spin_lock_irqsave (250,000 samples, 0.67%)</title><rect x="1142.8" y="869" width="7.9" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1145.80" y="879.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (250,000 samples, 0.67%)</title><rect x="1056.3" y="581" width="7.8" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1059.27" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::format&lt;long&gt; (500,000 samples, 1.33%)</title><rect x="395.5" y="277" width="15.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="398.47" y="287.5" ></text>
</g>
<g >
<title>std::vformat[abi:cxx11] (250,000 samples, 0.67%)</title><rect x="159.5" y="245" width="7.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="162.47" y="255.5" ></text>
</g>
<g >
<title>__alloc_skb (250,000 samples, 0.67%)</title><rect x="1095.6" y="869" width="7.9" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="1098.60" y="879.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_on_replacement_field (250,000 samples, 0.67%)</title><rect x="159.5" y="197" width="7.8" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="162.47" y="207.5" ></text>
</g>
<g >
<title>decltype (500,000 samples, 1.33%)</title><rect x="198.8" y="357" width="15.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="201.80" y="367.5" ></text>
</g>
<g >
<title>Json::Value::CZString::operator&lt; (250,000 samples, 0.67%)</title><rect x="10.0" y="965" width="7.9" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="13.00" y="975.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt;::get (250,000 samples, 0.67%)</title><rect x="489.9" y="901" width="7.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="492.87" y="911.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_R_T&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="198.8" y="277" width="7.9" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="201.80" y="287.5" ></text>
</g>
<g >
<title>nf_hook_slow (500,000 samples, 1.33%)</title><rect x="1079.9" y="789" width="15.7" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1082.87" y="799.5" ></text>
</g>
<g >
<title>__x64_sys_epoll_wait (750,000 samples, 2.00%)</title><rect x="513.5" y="901" width="23.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="516.47" y="911.5" >_..</text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_on_replacement_field (750,000 samples, 2.00%)</title><rect x="151.6" y="405" width="23.6" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="154.60" y="415.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::format&lt;std::chrono::zoned_time&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::time_zone const*&gt;&amp;, char const*, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (1,750,000 samples, 4.67%)</title><rect x="214.5" y="741" width="55.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="217.53" y="751.5" >std::..</text>
</g>
<g >
<title>do_syscall_64 (250,000 samples, 0.67%)</title><rect x="80.8" y="725" width="7.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="83.80" y="735.5" ></text>
</g>
<g >
<title>auto std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (500,000 samples, 1.33%)</title><rect x="371.9" y="149" width="15.7" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="374.87" y="159.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_int&lt;char&gt;::format&lt;int, std::__format::_Sink_iter&lt;char&gt; &gt; (500,000 samples, 1.33%)</title><rect x="371.9" y="117" width="15.7" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="374.87" y="127.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_on_replacement_field (1,750,000 samples, 4.67%)</title><rect x="214.5" y="677" width="55.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="217.53" y="687.5" >std::..</text>
</g>
<g >
<title>sock_poll (250,000 samples, 0.67%)</title><rect x="33.6" y="677" width="7.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="36.60" y="687.5" ></text>
</g>
<g >
<title>[libc.so.6] (250,000 samples, 0.67%)</title><rect x="293.2" y="533" width="7.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="296.20" y="543.5" ></text>
</g>
<g >
<title>decltype (250,000 samples, 0.67%)</title><rect x="246.0" y="165" width="7.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="249.00" y="175.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;std::chrono::zoned_time&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::time_zone const*&gt;, char&gt;::format&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (2,250,000 samples, 6.00%)</title><rect x="371.9" y="597" width="70.8" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="374.87" y="607.5" >std::bas..</text>
</g>
<g >
<title>ksys_write (5,750,000 samples, 15.33%)</title><rect x="773.1" y="933" width="180.9" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="776.07" y="943.5" >ksys_write</text>
</g>
<g >
<title>tty_paranoia_check (250,000 samples, 0.67%)</title><rect x="946.1" y="869" width="7.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="949.13" y="879.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (14,750,000 samples, 39.33%)</title><rect x="25.7" y="869" width="464.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="28.73" y="879.5" >void std::_Bind&lt;void </text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__do_vformat_to&lt;std::__format::_Sink_iter&lt;char&gt;, char, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="198.8" y="229" width="7.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="201.80" y="239.5" ></text>
</g>
<g >
<title>Request::deserialize (250,000 samples, 0.67%)</title><rect x="41.5" y="773" width="7.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="44.47" y="783.5" ></text>
</g>
<g >
<title>maybe_add_creds (250,000 samples, 0.67%)</title><rect x="1111.3" y="901" width="7.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1114.33" y="911.5" ></text>
</g>
<g >
<title>decltype (1,500,000 samples, 4.00%)</title><rect x="135.9" y="645" width="47.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="138.87" y="655.5" >decl..</text>
</g>
<g >
<title>void minilog::log_debug&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned short&gt; (2,750,000 samples, 7.33%)</title><rect x="214.5" y="773" width="86.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="217.53" y="783.5" >void minil..</text>
</g>
<g >
<title>__napi_poll (3,750,000 samples, 10.00%)</title><rect x="954.0" y="741" width="118.0" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="957.00" y="751.5" >__napi_poll</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (250,000 samples, 0.67%)</title><rect x="1158.5" y="981" width="7.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1161.53" y="991.5" ></text>
</g>
<g >
<title>std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (2,000,000 samples, 5.33%)</title><rect x="371.9" y="405" width="62.9" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="374.87" y="415.5" >std::_..</text>
</g>
<g >
<title>__check_object_size (250,000 samples, 0.67%)</title><rect x="623.6" y="837" width="7.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="626.60" y="847.5" ></text>
</g>
<g >
<title>decltype (1,250,000 samples, 3.33%)</title><rect x="222.4" y="645" width="39.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="225.40" y="655.5" >dec..</text>
</g>
<g >
<title>std::__invoke_result&lt;void  (14,500,000 samples, 38.67%)</title><rect x="25.7" y="837" width="456.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="28.73" y="847.5" >std::__invoke_result&lt;void </text>
</g>
<g >
<title>std::__format::_Seq_sink&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::get (250,000 samples, 0.67%)</title><rect x="190.9" y="725" width="7.9" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="193.93" y="735.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__do_vformat_to&lt;std::__format::_Sink_iter&lt;char&gt;, char, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (3,000,000 samples, 8.00%)</title><rect x="356.1" y="725" width="94.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="359.13" y="735.5" >std::__form..</text>
</g>
<g >
<title>auto std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (250,000 samples, 0.67%)</title><rect x="151.6" y="133" width="7.9" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="154.60" y="143.5" ></text>
</g>
<g >
<title>void minilog::log_debug&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (500,000 samples, 1.33%)</title><rect x="198.8" y="773" width="15.7" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="201.80" y="783.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::chrono::operator&lt;&lt; &lt;char, std::char_traits&lt;char&gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (2,000,000 samples, 5.33%)</title><rect x="371.9" y="517" width="62.9" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="374.87" y="527.5" >std::b..</text>
</g>
<g >
<title>[libc.so.6] (250,000 samples, 0.67%)</title><rect x="120.1" y="741" width="7.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="123.13" y="751.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Connection, std::default_delete&lt;Connection&gt; &gt;::_M_ptr (250,000 samples, 0.67%)</title><rect x="489.9" y="885" width="7.8" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="492.87" y="895.5" ></text>
</g>
<g >
<title>std::vformat[abi:cxx11] (250,000 samples, 0.67%)</title><rect x="96.5" y="757" width="7.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="99.53" y="767.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_scan (500,000 samples, 1.33%)</title><rect x="198.8" y="693" width="15.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="201.80" y="703.5" ></text>
</g>
<g >
<title>std::basic_format_parse_context&lt;char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_parse&lt;std::basic_format_parse_context&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="426.9" y="309" width="7.9" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="429.93" y="319.5" ></text>
</g>
<g >
<title>std::basic_format_args&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt;::_M_type (250,000 samples, 0.67%)</title><rect x="261.7" y="645" width="7.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="264.73" y="655.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__do_vformat_to&lt;std::__format::_Sink_iter&lt;char&gt;, char, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (500,000 samples, 1.33%)</title><rect x="371.9" y="245" width="15.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="374.87" y="255.5" ></text>
</g>
<g >
<title>__ip_queue_xmit (4,500,000 samples, 12.00%)</title><rect x="954.0" y="837" width="141.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="957.00" y="847.5" >__ip_queue_xmit</text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__do_vformat_to&lt;std::__format::_Sink_iter&lt;char&gt;, char, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (750,000 samples, 2.00%)</title><rect x="238.1" y="437" width="23.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="241.13" y="447.5" >s..</text>
</g>
<g >
<title>[libmariadb.so.3] (2,250,000 samples, 6.00%)</title><rect x="670.8" y="917" width="70.8" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="673.80" y="927.5" >[libmar..</text>
</g>
<g >
<title>std::vformat[abi:cxx11] (250,000 samples, 0.67%)</title><rect x="151.6" y="245" width="7.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="154.60" y="255.5" ></text>
</g>
<g >
<title>std::__format::_Spec&lt;char&gt;::_S_parse_width_or_precision (250,000 samples, 0.67%)</title><rect x="151.6" y="69" width="7.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="154.60" y="79.5" ></text>
</g>
<g >
<title>map_id_up (250,000 samples, 0.67%)</title><rect x="560.7" y="869" width="7.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="563.67" y="879.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (250,000 samples, 0.67%)</title><rect x="80.8" y="741" width="7.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="83.80" y="751.5" ></text>
</g>
<g >
<title>std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (500,000 samples, 1.33%)</title><rect x="198.8" y="389" width="15.7" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="201.80" y="399.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;std::chrono::__detail::__local_time_fmt&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, char&gt;::format&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (2,000,000 samples, 5.33%)</title><rect x="371.9" y="581" width="62.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="374.87" y="591.5" >std::b..</text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_S&lt;std::chrono::hh_mm_ss&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="419.1" y="277" width="7.8" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="422.07" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (250,000 samples, 0.67%)</title><rect x="308.9" y="789" width="7.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="311.93" y="799.5" ></text>
</g>
<g >
<title>__d_lookup_rcu (250,000 samples, 0.67%)</title><rect x="600.0" y="789" width="7.9" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="603.00" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::numpunct&lt;char&gt;::decimal_point (250,000 samples, 0.67%)</title><rect x="411.2" y="277" width="7.9" height="15.0" fill="rgb(228,105,25)" rx="2" ry="2" />
<text  x="414.20" y="287.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (1,000,000 samples, 2.67%)</title><rect x="1119.2" y="885" width="31.5" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1122.20" y="895.5" >__..</text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_on_replacement_field (250,000 samples, 0.67%)</title><rect x="96.5" y="709" width="7.9" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="99.53" y="719.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_on_replacement_field (1,500,000 samples, 4.00%)</title><rect x="135.9" y="677" width="47.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="138.87" y="687.5" >std:..</text>
</g>
<g >
<title>std::__format::_Optional_locale::~_Optional_locale (250,000 samples, 0.67%)</title><rect x="403.3" y="85" width="7.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="406.33" y="95.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__formatter_str&lt;char&gt;::format&lt;std::__format::_Sink_iter&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="222.4" y="597" width="7.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="225.40" y="607.5" ></text>
</g>
<g >
<title>auto std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (1,500,000 samples, 4.00%)</title><rect x="135.9" y="613" width="47.2" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="138.87" y="623.5" >auto..</text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_format_to_ostream&lt;std::chrono::time_point&lt;std::chrono::local_t, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (2,000,000 samples, 5.33%)</title><rect x="371.9" y="533" width="62.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="374.87" y="543.5" >std::b..</text>
</g>
<g >
<title>tcp_write_xmit (4,500,000 samples, 12.00%)</title><rect x="954.0" y="869" width="141.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="957.00" y="879.5" >tcp_write_xmit</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (250,000 samples, 0.67%)</title><rect x="269.6" y="725" width="7.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="272.60" y="735.5" ></text>
</g>
<g >
<title>std::__format::_Spec&lt;char&gt;::_S_parse_width_or_precision (250,000 samples, 0.67%)</title><rect x="426.9" y="277" width="7.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="429.93" y="287.5" ></text>
</g>
<g >
<title>ip_protocol_deliver_rcu (3,250,000 samples, 8.67%)</title><rect x="961.9" y="677" width="102.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="964.87" y="687.5" >ip_protocol_..</text>
</g>
<g >
<title>ip_finish_output2 (3,750,000 samples, 10.00%)</title><rect x="954.0" y="821" width="118.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="957.00" y="831.5" >ip_finish_outp..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::format&lt;long&gt; (250,000 samples, 0.67%)</title><rect x="159.5" y="261" width="7.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="162.47" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt;::operator (250,000 samples, 0.67%)</title><rect x="489.9" y="933" width="7.8" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="492.87" y="943.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (500,000 samples, 1.33%)</title><rect x="631.5" y="949" width="15.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="634.47" y="959.5" ></text>
</g>
<g >
<title>filename_lookup (1,000,000 samples, 2.67%)</title><rect x="576.4" y="869" width="31.5" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="579.40" y="879.5" >fi..</text>
</g>
<g >
<title>unix_stream_sendmsg (1,500,000 samples, 4.00%)</title><rect x="1103.5" y="917" width="47.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1106.47" y="927.5" >unix..</text>
</g>
<g >
<title>generic_permission (500,000 samples, 1.33%)</title><rect x="576.4" y="805" width="15.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="579.40" y="815.5" ></text>
</g>
<g >
<title>decltype (2,000,000 samples, 5.33%)</title><rect x="371.9" y="373" width="62.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="374.87" y="383.5" >decltype</text>
</g>
<g >
<title>all (37,500,000 samples, 100%)</title><rect x="10.0" y="1029" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1039.5" ></text>
</g>
<g >
<title>epoll_wait (750,000 samples, 2.00%)</title><rect x="513.5" y="949" width="23.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="516.47" y="959.5" >e..</text>
</g>
<g >
<title>std::basic_format_parse_context&lt;char&gt;::iterator std::formatter&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, char&gt;::parse&lt;std::basic_format_parse_context&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="426.9" y="325" width="7.9" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="429.93" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,250,000 samples, 6.00%)</title><rect x="560.7" y="949" width="70.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="563.67" y="959.5" >entry_S..</text>
</g>
<g >
<title>[libc.so.6] (750,000 samples, 2.00%)</title><rect x="316.8" y="725" width="23.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="319.80" y="735.5" >[..</text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_int&lt;char&gt;::_M_format_int&lt;std::__format::_Sink_iter&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="246.0" y="85" width="7.9" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="249.00" y="95.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::operator bool (250,000 samples, 0.67%)</title><rect x="340.4" y="773" width="7.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="343.40" y="783.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_R_T&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (1,250,000 samples, 3.33%)</title><rect x="387.6" y="293" width="39.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="390.60" y="303.5" >std..</text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::copy (250,000 samples, 0.67%)</title><rect x="293.2" y="549" width="7.9" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="296.20" y="559.5" ></text>
</g>
<g >
<title>std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (750,000 samples, 2.00%)</title><rect x="151.6" y="389" width="23.6" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="154.60" y="399.5" >s..</text>
</g>
<g >
<title>decltype (3,000,000 samples, 8.00%)</title><rect x="356.1" y="661" width="94.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="359.13" y="671.5" >decltype</text>
</g>
<g >
<title>kmem_cache_alloc (250,000 samples, 0.67%)</title><rect x="615.7" y="853" width="7.9" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="618.73" y="863.5" ></text>
</g>
<g >
<title>std::__format::_Sink&lt;char&gt;::_M_write (250,000 samples, 0.67%)</title><rect x="246.0" y="53" width="7.9" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="249.00" y="63.5" ></text>
</g>
<g >
<title>ip_local_out (750,000 samples, 2.00%)</title><rect x="1072.0" y="821" width="23.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1075.00" y="831.5" >i..</text>
</g>
<g >
<title>_copy_from_user (250,000 samples, 0.67%)</title><rect x="25.7" y="709" width="7.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="28.73" y="719.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::chrono::operator&lt;&lt; &lt;char, std::char_traits&lt;char&gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (500,000 samples, 1.33%)</title><rect x="198.8" y="501" width="15.7" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="201.80" y="511.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_int&lt;char&gt;::_M_format_int&lt;std::__format::_Sink_iter&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="403.3" y="101" width="7.9" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="406.33" y="111.5" ></text>
</g>
<g >
<title>inet_recvmsg (250,000 samples, 0.67%)</title><rect x="1158.5" y="917" width="7.9" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1161.53" y="927.5" ></text>
</g>
<g >
<title>__rseq_handle_notify_resume (500,000 samples, 1.33%)</title><rect x="718.0" y="773" width="15.7" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="721.00" y="783.5" ></text>
</g>
<g >
<title>decltype (750,000 samples, 2.00%)</title><rect x="238.1" y="373" width="23.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="241.13" y="383.5" >d..</text>
</g>
<g >
<title>void std::basic_format_arg&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt;::handle::_S_format&lt;std::chrono::zoned_time&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::time_zone const*&gt; const&gt; (500,000 samples, 1.33%)</title><rect x="198.8" y="597" width="15.7" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="201.80" y="607.5" ></text>
</g>
<g >
<title>epoll_ctl (250,000 samples, 0.67%)</title><rect x="450.5" y="773" width="7.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="453.53" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (250,000 samples, 0.67%)</title><rect x="269.6" y="661" width="7.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="272.60" y="671.5" ></text>
</g>
<g >
<title>[unknown] (3,500,000 samples, 9.33%)</title><rect x="544.9" y="981" width="110.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="547.93" y="991.5" >[unknown]</text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_scan (250,000 samples, 0.67%)</title><rect x="403.3" y="229" width="7.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="406.33" y="239.5" ></text>
</g>
<g >
<title>void std::_Bind&lt;void  (14,750,000 samples, 39.33%)</title><rect x="25.7" y="853" width="464.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="28.73" y="863.5" >void std::_Bind&lt;void </text>
</g>
<g >
<title>mysqlpp::Query::execute (2,750,000 samples, 7.33%)</title><rect x="655.1" y="949" width="86.5" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="658.07" y="959.5" >mysqlpp::Q..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (500,000 samples, 1.33%)</title><rect x="25.7" y="757" width="15.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="28.73" y="767.5" ></text>
</g>
<g >
<title>void std::basic_format_arg&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt;::handle::_S_format&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; const&gt; (750,000 samples, 2.00%)</title><rect x="151.6" y="325" width="23.6" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="154.60" y="335.5" >v..</text>
</g>
<g >
<title>[unknown] (3,250,000 samples, 8.67%)</title><rect x="655.1" y="965" width="102.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="658.07" y="975.5" >[unknown]</text>
</g>
<g >
<title>decltype (250,000 samples, 0.67%)</title><rect x="159.5" y="165" width="7.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="162.47" y="175.5" ></text>
</g>
<g >
<title>unsigned char std::__detail::__from_chars_alnum_to_val&lt;false&gt; (250,000 samples, 0.67%)</title><rect x="426.9" y="261" width="7.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="429.93" y="271.5" ></text>
</g>
<g >
<title>[libmariadb.so.3] (250,000 samples, 0.67%)</title><rect x="749.5" y="933" width="7.8" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="752.47" y="943.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::format_to&lt;std::__format::_Sink_iter&lt;char&gt;, char, long, unsigned int const&amp;&gt; (250,000 samples, 0.67%)</title><rect x="167.3" y="245" width="7.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="170.33" y="255.5" ></text>
</g>
<g >
<title>std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::common_type&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;::type&gt; std::chrono::operator+&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, long, std::ratio&lt;1l, 1l&gt; &gt; (250,000 samples, 0.67%)</title><rect x="434.8" y="549" width="7.9" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="437.80" y="559.5" ></text>
</g>
<g >
<title>do_sys_poll (250,000 samples, 0.67%)</title><rect x="710.1" y="789" width="7.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="713.13" y="799.5" ></text>
</g>
<g >
<title>do_syscall_64 (6,250,000 samples, 16.67%)</title><rect x="954.0" y="965" width="196.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="957.00" y="975.5" >do_syscall_64</text>
</g>
<g >
<title>auto std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (1,250,000 samples, 3.33%)</title><rect x="222.4" y="613" width="39.3" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="225.40" y="623.5" >aut..</text>
</g>
<g >
<title>finish_task_switch.isra.0 (250,000 samples, 0.67%)</title><rect x="710.1" y="725" width="7.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="713.13" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::format&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; const&amp;&gt; (2,000,000 samples, 5.33%)</title><rect x="371.9" y="485" width="62.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="374.87" y="495.5" >std::_..</text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_on_replacement_field (250,000 samples, 0.67%)</title><rect x="151.6" y="197" width="7.9" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="154.60" y="207.5" ></text>
</g>
<g >
<title>auto std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (250,000 samples, 0.67%)</title><rect x="293.2" y="629" width="7.9" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="296.20" y="639.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_int&lt;char&gt;::format&lt;long long, std::__format::_Sink_iter&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="419.1" y="117" width="7.8" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="422.07" y="127.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__do_vformat_to&lt;std::__format::_Sink_iter&lt;char&gt;, char, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="96.5" y="741" width="7.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="99.53" y="751.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (4,750,000 samples, 12.67%)</title><rect x="954.0" y="901" width="149.5" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="957.00" y="911.5" >tcp_sendmsg_locked</text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, void  (14,500,000 samples, 38.67%)</title><rect x="25.7" y="821" width="456.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="28.73" y="831.5" >void std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>from_kgid_munged (250,000 samples, 0.67%)</title><rect x="560.7" y="885" width="7.8" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="563.67" y="895.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, char&gt;::format&lt;std::__format::_Sink_iter&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="293.2" y="613" width="7.9" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="296.20" y="623.5" ></text>
</g>
<g >
<title>decltype (250,000 samples, 0.67%)</title><rect x="96.5" y="677" width="7.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="99.53" y="687.5" ></text>
</g>
<g >
<title>std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (250,000 samples, 0.67%)</title><rect x="293.2" y="677" width="7.9" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="296.20" y="687.5" ></text>
</g>
<g >
<title>std::vformat[abi:cxx11] (500,000 samples, 1.33%)</title><rect x="395.5" y="261" width="15.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="398.47" y="271.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__do_vformat_to&lt;std::__format::_Sink_iter&lt;char&gt;, char, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (500,000 samples, 1.33%)</title><rect x="198.8" y="709" width="15.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="201.80" y="719.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_scan (250,000 samples, 0.67%)</title><rect x="419.1" y="229" width="7.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="422.07" y="239.5" ></text>
</g>
<g >
<title>std::__format::_Spec&lt;char&gt;::_M_parse_width (250,000 samples, 0.67%)</title><rect x="426.9" y="293" width="7.9" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="429.93" y="303.5" ></text>
</g>
<g >
<title>std::vformat[abi:cxx11] (250,000 samples, 0.67%)</title><rect x="246.0" y="245" width="7.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="249.00" y="255.5" ></text>
</g>
<g >
<title>std::chrono::duration&lt;unsigned char, std::ratio&lt;1l, 1l&gt; &gt;::count (250,000 samples, 0.67%)</title><rect x="387.6" y="229" width="7.9" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="390.60" y="239.5" ></text>
</g>
<g >
<title>std::reverse_iterator&lt;std::__format::_Arg_t const*&gt;::reverse_iterator (250,000 samples, 0.67%)</title><rect x="348.3" y="709" width="7.8" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="351.27" y="719.5" ></text>
</g>
<g >
<title>__poll (1,750,000 samples, 4.67%)</title><rect x="678.7" y="853" width="55.0" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="681.67" y="863.5" >__poll</text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_format_to_ostream&lt;std::chrono::__detail::__local_time_fmt&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (1,250,000 samples, 3.33%)</title><rect x="135.9" y="533" width="39.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="138.87" y="543.5" >std..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (750,000 samples, 2.00%)</title><rect x="513.5" y="933" width="23.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="516.47" y="943.5" >e..</text>
</g>
<g >
<title>decltype (750,000 samples, 2.00%)</title><rect x="238.1" y="357" width="23.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="241.13" y="367.5" >d..</text>
</g>
<g >
<title>__sys_recvfrom (250,000 samples, 0.67%)</title><rect x="1158.5" y="933" width="7.9" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1161.53" y="943.5" ></text>
</g>
<g >
<title>std::basic_format_arg&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt;::handle::handle&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; const&gt; (250,000 samples, 0.67%)</title><rect x="143.7" y="437" width="7.9" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="146.73" y="447.5" ></text>
</g>
<g >
<title>Epoller::rwcfg (250,000 samples, 0.67%)</title><rect x="80.8" y="773" width="7.9" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="83.80" y="783.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__do_vformat_to&lt;std::__format::_Sink_iter&lt;char&gt;, char, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="419.1" y="245" width="7.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="422.07" y="255.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_format&lt;std::chrono::__detail::__local_time_fmt&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (1,000,000 samples, 2.67%)</title><rect x="230.3" y="549" width="31.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="233.27" y="559.5" >st..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char*, std::span&lt;char, 18446744073709551615ul&gt; &gt;::operator+= (250,000 samples, 0.67%)</title><rect x="238.1" y="245" width="7.9" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="241.13" y="255.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_int&lt;char&gt;::format&lt;long long, std::__format::_Sink_iter&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="403.3" y="117" width="7.9" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="406.33" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (750,000 samples, 2.00%)</title><rect x="316.8" y="773" width="23.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="319.80" y="783.5" >s..</text>
</g>
<g >
<title>__fget_light (250,000 samples, 0.67%)</title><rect x="773.1" y="901" width="7.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="776.07" y="911.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (250,000 samples, 0.67%)</title><rect x="269.6" y="709" width="7.9" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="272.60" y="719.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::chrono::operator&lt;&lt; &lt;char, std::char_traits&lt;char&gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1,000,000 samples, 2.67%)</title><rect x="143.7" y="501" width="31.5" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="146.73" y="511.5" >st..</text>
</g>
<g >
<title>std::__format::__formatter_int&lt;char&gt;::_M_do_parse (250,000 samples, 0.67%)</title><rect x="151.6" y="101" width="7.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="154.60" y="111.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_scan (500,000 samples, 1.33%)</title><rect x="198.8" y="421" width="15.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="201.80" y="431.5" ></text>
</g>
<g >
<title>do_output_char (250,000 samples, 0.67%)</title><rect x="804.5" y="853" width="7.9" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="807.53" y="863.5" ></text>
</g>
<g >
<title>fstatat64 (2,250,000 samples, 6.00%)</title><rect x="560.7" y="965" width="70.8" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="563.67" y="975.5" >fstatat64</text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_format_to_ostream&lt;std::chrono::__detail::__local_time_fmt&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (2,000,000 samples, 5.33%)</title><rect x="371.9" y="549" width="62.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="374.87" y="559.5" >std::b..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (750,000 samples, 2.00%)</title><rect x="316.8" y="789" width="23.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="319.80" y="799.5" >s..</text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_scan (3,000,000 samples, 8.00%)</title><rect x="356.1" y="709" width="94.4" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="359.13" y="719.5" >std::__form..</text>
</g>
<g >
<title>std::chrono::zoned_time&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::time_zone const*&gt;::get_local_time (250,000 samples, 0.67%)</title><rect x="434.8" y="581" width="7.9" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="437.80" y="591.5" ></text>
</g>
<g >
<title>EpollServer::ret (500,000 samples, 1.33%)</title><rect x="65.1" y="773" width="15.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="68.07" y="783.5" ></text>
</g>
<g >
<title>server (37,500,000 samples, 100.00%)</title><rect x="10.0" y="1013" width="1180.0" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="13.00" y="1023.5" >server</text>
</g>
<g >
<title>sk_forced_mem_schedule (250,000 samples, 0.67%)</title><rect x="1048.4" y="597" width="7.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1051.40" y="607.5" ></text>
</g>
<g >
<title>map_id_up (250,000 samples, 0.67%)</title><rect x="568.5" y="869" width="7.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="571.53" y="879.5" ></text>
</g>
<g >
<title>void minilog::log_debug&lt;&gt; (3,500,000 samples, 9.33%)</title><rect x="340.4" y="789" width="110.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="343.40" y="799.5" >void minilog:..</text>
</g>
<g >
<title>tcp_rcv_space_adjust (250,000 samples, 0.67%)</title><rect x="1158.5" y="869" width="7.9" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1161.53" y="879.5" ></text>
</g>
<g >
<title>decltype (3,000,000 samples, 8.00%)</title><rect x="356.1" y="645" width="94.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="359.13" y="655.5" >decltype</text>
</g>
<g >
<title>void std::basic_format_arg&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt;::handle::_S_format&lt;std::chrono::zoned_time&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::time_zone const*&gt; const&gt; (2,500,000 samples, 6.67%)</title><rect x="371.9" y="613" width="78.6" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="374.87" y="623.5" >void std:..</text>
</g>
<g >
<title>recv (250,000 samples, 0.67%)</title><rect x="1158.5" y="997" width="7.9" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1161.53" y="1007.5" ></text>
</g>
<g >
<title>[libmariadb.so.3] (2,750,000 samples, 7.33%)</title><rect x="655.1" y="933" width="86.5" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="658.07" y="943.5" >[libmariad..</text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__do_vformat_to&lt;std::__format::_Sink_iter&lt;char&gt;, char, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (1,500,000 samples, 4.00%)</title><rect x="135.9" y="709" width="47.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="138.87" y="719.5" >std:..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (250,000 samples, 0.67%)</title><rect x="505.6" y="901" width="7.9" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="508.60" y="911.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (2,500,000 samples, 6.67%)</title><rect x="985.5" y="645" width="78.6" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="988.47" y="655.5" >tcp_v4_do..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (250,000 samples, 0.67%)</title><rect x="505.6" y="885" width="7.9" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="508.60" y="895.5" ></text>
</g>
<g >
<title>auto std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (750,000 samples, 2.00%)</title><rect x="238.1" y="341" width="23.6" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="241.13" y="351.5" >a..</text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::format_to&lt;std::__format::_Sink_iter&lt;char&gt;, char, long, unsigned int const&amp;&gt; (250,000 samples, 0.67%)</title><rect x="419.1" y="261" width="7.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="422.07" y="271.5" ></text>
</g>
<g >
<title>std::vformat[abi:cxx11] (250,000 samples, 0.67%)</title><rect x="293.2" y="741" width="7.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="296.20" y="751.5" ></text>
</g>
<g >
<title>EpollServer::sender (500,000 samples, 1.33%)</title><rect x="450.5" y="805" width="15.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="453.53" y="815.5" ></text>
</g>
<g >
<title>void minilog::details::log_generic&lt;&gt; (3,250,000 samples, 8.67%)</title><rect x="348.3" y="773" width="102.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="351.27" y="783.5" >void minilog..</text>
</g>
<g >
<title>std::vformat[abi:cxx11] (500,000 samples, 1.33%)</title><rect x="183.1" y="741" width="15.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="186.07" y="751.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_scan (250,000 samples, 0.67%)</title><rect x="246.0" y="213" width="7.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="249.00" y="223.5" ></text>
</g>
<g >
<title>decltype (500,000 samples, 1.33%)</title><rect x="198.8" y="645" width="15.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="201.80" y="655.5" ></text>
</g>
<g >
<title>[unknown] (13,000,000 samples, 34.67%)</title><rect x="544.9" y="997" width="409.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="547.93" y="1007.5" >[unknown]</text>
</g>
<g >
<title>decltype (250,000 samples, 0.67%)</title><rect x="96.5" y="661" width="7.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="99.53" y="671.5" ></text>
</g>
<g >
<title>malloc (250,000 samples, 0.67%)</title><rect x="269.6" y="645" width="7.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="272.60" y="655.5" ></text>
</g>
<g >
<title>std::span&lt;char, 18446744073709551615ul&gt;::size (250,000 samples, 0.67%)</title><rect x="96.5" y="565" width="7.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="99.53" y="575.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, char&gt;::format&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (750,000 samples, 2.00%)</title><rect x="151.6" y="309" width="23.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="154.60" y="319.5" >s..</text>
</g>
<g >
<title>__tcp_transmit_skb (4,500,000 samples, 12.00%)</title><rect x="954.0" y="853" width="141.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="957.00" y="863.5" >__tcp_transmit_skb</text>
</g>
<g >
<title>syscall_exit_to_user_mode (500,000 samples, 1.33%)</title><rect x="718.0" y="805" width="15.7" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="721.00" y="815.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__do_vformat_to&lt;std::__format::_Sink_iter&lt;char&gt;, char, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="159.5" y="229" width="7.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="162.47" y="239.5" ></text>
</g>
<g >
<title> (250,000 samples, 0.67%)</title><rect x="489.9" y="917" width="7.8" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="492.87" y="927.5" ></text>
</g>
<g >
<title>__x64_sys_poll (250,000 samples, 0.67%)</title><rect x="710.1" y="805" width="7.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="713.13" y="815.5" ></text>
</g>
<g >
<title>std::vformat[abi:cxx11] (250,000 samples, 0.67%)</title><rect x="198.8" y="245" width="7.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="201.80" y="255.5" ></text>
</g>
<g >
<title>decltype (250,000 samples, 0.67%)</title><rect x="151.6" y="165" width="7.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="154.60" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;Sock, std::default_delete&lt;Sock&gt; &gt;::get (250,000 samples, 0.67%)</title><rect x="458.4" y="741" width="7.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="461.40" y="751.5" ></text>
</g>
<g >
<title>mysqlpp::Connection::query (250,000 samples, 0.67%)</title><rect x="301.1" y="789" width="7.8" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="304.07" y="799.5" ></text>
</g>
<g >
<title>readlink (500,000 samples, 1.33%)</title><rect x="631.5" y="965" width="15.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="634.47" y="975.5" ></text>
</g>
<g >
<title>std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (250,000 samples, 0.67%)</title><rect x="151.6" y="181" width="7.9" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="154.60" y="191.5" ></text>
</g>
<g >
<title>std::chrono::hh_mm_ss&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::hh_mm_ss (250,000 samples, 0.67%)</title><rect x="387.6" y="245" width="7.9" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="390.60" y="255.5" ></text>
</g>
<g >
<title>decltype (250,000 samples, 0.67%)</title><rect x="293.2" y="645" width="7.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="296.20" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::format&lt;long&gt; (250,000 samples, 0.67%)</title><rect x="246.0" y="261" width="7.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="249.00" y="271.5" ></text>
</g>
<g >
<title>do_readlinkat (500,000 samples, 1.33%)</title><rect x="631.5" y="901" width="15.7" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="634.47" y="911.5" ></text>
</g>
<g >
<title>do_syscall_64 (2,250,000 samples, 6.00%)</title><rect x="560.7" y="933" width="70.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="563.67" y="943.5" >do_sysc..</text>
</g>
<g >
<title>decltype (250,000 samples, 0.67%)</title><rect x="419.1" y="165" width="7.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="422.07" y="175.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_int&lt;char&gt;::_M_format_int&lt;std::__format::_Sink_iter&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="419.1" y="101" width="7.8" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="422.07" y="111.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_F&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (500,000 samples, 1.33%)</title><rect x="371.9" y="293" width="15.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="374.87" y="303.5" ></text>
</g>
<g >
<title>Response::~Response (250,000 samples, 0.67%)</title><rect x="10.0" y="997" width="7.9" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="13.00" y="1007.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__formatter_str&lt;char&gt;::format&lt;std::__format::_Sink_iter&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="356.1" y="597" width="7.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="359.13" y="607.5" ></text>
</g>
<g >
<title>EpollServer::dispatcher (15,500,000 samples, 41.33%)</title><rect x="25.7" y="949" width="487.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="28.73" y="959.5" >EpollServer::dispatcher</text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_scan (750,000 samples, 2.00%)</title><rect x="151.6" y="421" width="23.6" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="154.60" y="431.5" >s..</text>
</g>
<g >
<title>std::basic_format_parse_context&lt;char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_parse&lt;std::basic_format_parse_context&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="206.7" y="293" width="7.8" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="209.67" y="303.5" ></text>
</g>
<g >
<title>getname_flags.part.0 (250,000 samples, 0.67%)</title><rect x="639.3" y="869" width="7.9" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="642.33" y="879.5" ></text>
</g>
<g >
<title>auto std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (250,000 samples, 0.67%)</title><rect x="246.0" y="133" width="7.9" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="249.00" y="143.5" ></text>
</g>
<g >
<title>__check_object_size (250,000 samples, 0.67%)</title><rect x="639.3" y="837" width="7.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="642.33" y="847.5" ></text>
</g>
<g >
<title>schedule (250,000 samples, 0.67%)</title><rect x="529.2" y="853" width="7.9" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="532.20" y="863.5" ></text>
</g>
<g >
<title>__x64_sys_epoll_ctl (250,000 samples, 0.67%)</title><rect x="450.5" y="725" width="7.9" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="453.53" y="735.5" ></text>
</g>
<g >
<title>DBConnPool&lt;7ul&gt;::ret (250,000 samples, 0.67%)</title><rect x="65.1" y="757" width="7.8" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="68.07" y="767.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_on_replacement_field (3,000,000 samples, 8.00%)</title><rect x="356.1" y="693" width="94.4" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="359.13" y="703.5" >std::__form..</text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_scan (250,000 samples, 0.67%)</title><rect x="293.2" y="709" width="7.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="296.20" y="719.5" ></text>
</g>
<g >
<title>__fget_files (250,000 samples, 0.67%)</title><rect x="773.1" y="885" width="7.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="776.07" y="895.5" ></text>
</g>
<g >
<title>vfs_statx (1,750,000 samples, 4.67%)</title><rect x="576.4" y="901" width="55.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="579.40" y="911.5" >vfs_s..</text>
</g>
<g >
<title>std::tuple_element&lt;1ul, std::tuple&lt;EpollServer*, std::_Placeholder&lt;1&gt; &gt; &gt;::type&amp; std::get&lt;1ul, EpollServer*, std::_Placeholder&lt;1&gt; &gt; (250,000 samples, 0.67%)</title><rect x="482.0" y="837" width="7.9" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="485.00" y="847.5" ></text>
</g>
<g >
<title>std::vformat[abi:cxx11] (750,000 samples, 2.00%)</title><rect x="238.1" y="453" width="23.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="241.13" y="463.5" >s..</text>
</g>
<g >
<title>std::vformat[abi:cxx11] (1,500,000 samples, 4.00%)</title><rect x="135.9" y="725" width="47.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="138.87" y="735.5" >std:..</text>
</g>
<g >
<title>strncpy_from_user (250,000 samples, 0.67%)</title><rect x="639.3" y="853" width="7.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="642.33" y="863.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::chrono::operator&lt;&lt; &lt;char, std::char_traits&lt;char&gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (500,000 samples, 1.33%)</title><rect x="198.8" y="485" width="15.7" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="201.80" y="495.5" ></text>
</g>
<g >
<title>std::vformat[abi:cxx11] (500,000 samples, 1.33%)</title><rect x="198.8" y="725" width="15.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="201.80" y="735.5" ></text>
</g>
<g >
<title>__sys_sendto (6,250,000 samples, 16.67%)</title><rect x="954.0" y="933" width="196.7" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="957.00" y="943.5" >__sys_sendto</text>
</g>
<g >
<title>Request::parse_request (250,000 samples, 0.67%)</title><rect x="41.5" y="789" width="7.8" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="44.47" y="799.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::deallocate (250,000 samples, 0.67%)</title><rect x="41.5" y="709" width="7.8" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="44.47" y="719.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::chrono::operator&lt;&lt; &lt;char, std::char_traits&lt;char&gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (750,000 samples, 2.00%)</title><rect x="238.1" y="485" width="23.6" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="241.13" y="495.5" >s..</text>
</g>
<g >
<title>std::chrono::time_point&lt;std::chrono::local_t, std::common_type&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;::type&gt; std::chrono::time_zone::to_local&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (250,000 samples, 0.67%)</title><rect x="434.8" y="565" width="7.9" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="437.80" y="575.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::_Placeholder&lt;1&gt; &gt;::_M_head (250,000 samples, 0.67%)</title><rect x="482.0" y="821" width="7.9" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="485.00" y="831.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__do_vformat_to&lt;std::__format::_Sink_iter&lt;char&gt;, char, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (1,750,000 samples, 4.67%)</title><rect x="214.5" y="709" width="55.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="217.53" y="719.5" >std::..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (250,000 samples, 0.67%)</title><rect x="505.6" y="917" width="7.9" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="508.60" y="927.5" ></text>
</g>
<g >
<title>sk_stream_alloc_skb (250,000 samples, 0.67%)</title><rect x="1095.6" y="885" width="7.9" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1098.60" y="895.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (750,000 samples, 2.00%)</title><rect x="316.8" y="757" width="23.6" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="319.80" y="767.5" >s..</text>
</g>
<g >
<title>std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (250,000 samples, 0.67%)</title><rect x="246.0" y="181" width="7.9" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="249.00" y="191.5" ></text>
</g>
<g >
<title>do_epoll_ctl (250,000 samples, 0.67%)</title><rect x="450.5" y="709" width="7.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="453.53" y="719.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, char&gt;::format&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (750,000 samples, 2.00%)</title><rect x="238.1" y="309" width="23.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="241.13" y="319.5" >s..</text>
</g>
<g >
<title>epoll_ctl (250,000 samples, 0.67%)</title><rect x="80.8" y="757" width="7.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="83.80" y="767.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement (250,000 samples, 0.67%)</title><rect x="757.3" y="981" width="7.9" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="760.33" y="991.5" ></text>
</g>
<g >
<title>__ip_local_out (750,000 samples, 2.00%)</title><rect x="1072.0" y="805" width="23.6" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1075.00" y="815.5" >_..</text>
</g>
<g >
<title>std::__format::__formatter_chrono&lt;char&gt;::_M_parse&lt;std::basic_format_parse_context&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="206.7" y="277" width="7.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="209.67" y="287.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_on_replacement_field (500,000 samples, 1.33%)</title><rect x="198.8" y="405" width="15.7" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="201.80" y="415.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_format&lt;std::chrono::__detail::__local_time_fmt&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (2,000,000 samples, 5.33%)</title><rect x="371.9" y="565" width="62.9" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="374.87" y="575.5" >std::b..</text>
</g>
<g >
<title>schedule (250,000 samples, 0.67%)</title><rect x="710.1" y="757" width="7.9" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="713.13" y="767.5" ></text>
</g>
<g >
<title>decltype (250,000 samples, 0.67%)</title><rect x="387.6" y="277" width="7.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="390.60" y="287.5" ></text>
</g>
<g >
<title>net_rx_action (3,750,000 samples, 10.00%)</title><rect x="954.0" y="757" width="118.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="957.00" y="767.5" >net_rx_action</text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, char&gt;::format&lt;std::__format::_Sink_iter&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="96.5" y="629" width="7.9" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="99.53" y="639.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_format&lt;std::chrono::__detail::__local_time_fmt&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (1,250,000 samples, 3.33%)</title><rect x="135.9" y="549" width="39.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="138.87" y="559.5" >std..</text>
</g>
<g >
<title>ipt_do_table (250,000 samples, 0.67%)</title><rect x="954.0" y="661" width="7.9" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="957.00" y="671.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_scan (500,000 samples, 1.33%)</title><rect x="371.9" y="229" width="15.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="374.87" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (5,750,000 samples, 15.33%)</title><rect x="773.1" y="949" width="180.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="776.07" y="959.5" >do_syscall_64</text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_on_replacement_field (250,000 samples, 0.67%)</title><rect x="246.0" y="197" width="7.9" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="249.00" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::format&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (250,000 samples, 0.67%)</title><rect x="96.5" y="773" width="7.9" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="99.53" y="783.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_on_replacement_field (250,000 samples, 0.67%)</title><rect x="403.3" y="213" width="7.9" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="406.33" y="223.5" ></text>
</g>
<g >
<title>std::__format::_Arg_value&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; std::__format::_Arg_store&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;, std::basic_format_arg&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt;::handle&gt;::_S_make_elt&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; const&gt; (250,000 samples, 0.67%)</title><rect x="143.7" y="453" width="7.9" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="146.73" y="463.5" ></text>
</g>
<g >
<title>std::__format::_Sink&lt;char&gt;::_M_write (250,000 samples, 0.67%)</title><rect x="96.5" y="581" width="7.9" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="99.53" y="591.5" ></text>
</g>
<g >
<title>char const* std::__format::__formatter_int&lt;char&gt;::_M_parse&lt;int&gt; (250,000 samples, 0.67%)</title><rect x="151.6" y="117" width="7.9" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="154.60" y="127.5" ></text>
</g>
<g >
<title>tcp_ack (250,000 samples, 0.67%)</title><rect x="1040.5" y="613" width="7.9" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1043.53" y="623.5" ></text>
</g>
<g >
<title>auto std::__format::__pack_arg_types&lt;5, 5ul&gt; (250,000 samples, 0.67%)</title><rect x="348.3" y="725" width="7.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="351.27" y="735.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__do_vformat_to&lt;std::__format::_Sink_iter&lt;char&gt;, char, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="293.2" y="725" width="7.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="296.20" y="735.5" ></text>
</g>
<g >
<title>ip_local_deliver (250,000 samples, 0.67%)</title><rect x="954.0" y="693" width="7.9" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="957.00" y="703.5" ></text>
</g>
<g >
<title>new_sync_write (5,500,000 samples, 14.67%)</title><rect x="780.9" y="901" width="173.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="783.93" y="911.5" >new_sync_write</text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_scan (1,750,000 samples, 4.67%)</title><rect x="214.5" y="693" width="55.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="217.53" y="703.5" >std::..</text>
</g>
<g >
<title>exit_to_user_mode_prepare (500,000 samples, 1.33%)</title><rect x="718.0" y="789" width="15.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="721.00" y="799.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::chrono::operator&lt;&lt; &lt;char, std::char_traits&lt;char&gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (2,000,000 samples, 5.33%)</title><rect x="371.9" y="501" width="62.9" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="374.87" y="511.5" >std::b..</text>
</g>
<g >
<title>decltype (500,000 samples, 1.33%)</title><rect x="198.8" y="373" width="15.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="201.80" y="383.5" ></text>
</g>
<g >
<title>void std::basic_format_arg&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt;::handle::_S_format&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; const&gt; (750,000 samples, 2.00%)</title><rect x="238.1" y="325" width="23.6" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="241.13" y="335.5" >v..</text>
</g>
<g >
<title>[libmariadb.so.3] (2,000,000 samples, 5.33%)</title><rect x="678.7" y="885" width="62.9" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="681.67" y="895.5" >[libma..</text>
</g>
<g >
<title>walk_component (500,000 samples, 1.33%)</title><rect x="592.1" y="821" width="15.8" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="595.13" y="831.5" ></text>
</g>
<g >
<title>std::basic_format_args&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt;::basic_format_args&lt;std::basic_format_arg&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt;::handle, char const*, unsigned int, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (250,000 samples, 0.67%)</title><rect x="348.3" y="741" width="7.8" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="351.27" y="751.5" ></text>
</g>
<g >
<title>__check_heap_object (250,000 samples, 0.67%)</title><rect x="780.9" y="853" width="7.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="783.93" y="863.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__write&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; (250,000 samples, 0.67%)</title><rect x="356.1" y="581" width="7.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="359.13" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (500,000 samples, 1.33%)</title><rect x="269.6" y="741" width="15.7" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="272.60" y="751.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__formatter_str&lt;char&gt;::format&lt;std::__format::_Sink_iter&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="96.5" y="613" width="7.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="99.53" y="623.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_scan (250,000 samples, 0.67%)</title><rect x="198.8" y="213" width="7.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="201.80" y="223.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (250,000 samples, 0.67%)</title><rect x="1095.6" y="853" width="7.9" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1098.60" y="863.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (250,000 samples, 0.67%)</title><rect x="112.3" y="725" width="7.8" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="115.27" y="735.5" ></text>
</g>
<g >
<title>std::enable_if&lt;std::__or_&lt;std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, signed char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, long long&gt; &gt;, std::__or_&lt;std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned char&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned short&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned int&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long&gt;, std::is_same&lt;std::remove_cv&lt;unsigned int&gt;::type, unsigned long long&gt; &gt;, std::is_same&lt;unsigned int, __int128&gt;, std::is_same&lt;unsigned int, unsigned __int128&gt;, std::is_same&lt;char, std::remove_cv&lt;unsigned int&gt;::type&gt; &gt;::value, std::to_chars_result&gt;::type std::__to_chars_i&lt;unsigned int&gt; (250,000 samples, 0.67%)</title><rect x="371.9" y="101" width="7.8" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="374.87" y="111.5" ></text>
</g>
<g >
<title>void std::basic_format_arg&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt;::handle::_S_format&lt;std::chrono::zoned_time&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::time_zone const*&gt; const&gt; (1,000,000 samples, 2.67%)</title><rect x="230.3" y="597" width="31.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="233.27" y="607.5" >vo..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::format&lt;std::chrono::zoned_time&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::time_zone const*&gt;&amp;, char const*, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (1,500,000 samples, 4.00%)</title><rect x="135.9" y="741" width="47.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="138.87" y="751.5" >std:..</text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;std::chrono::zoned_time&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::time_zone const*&gt;, char&gt;::format&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (1,500,000 samples, 4.00%)</title><rect x="135.9" y="581" width="47.2" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="138.87" y="591.5" >std:..</text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_format_to_ostream&lt;std::chrono::time_point&lt;std::chrono::local_t, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (1,000,000 samples, 2.67%)</title><rect x="143.7" y="517" width="31.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="146.73" y="527.5" >st..</text>
</g>
<g >
<title>tty_insert_flip_string_and_push_buffer (250,000 samples, 0.67%)</title><rect x="804.5" y="837" width="7.9" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="807.53" y="847.5" ></text>
</g>
<g >
<title>auto std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (2,000,000 samples, 5.33%)</title><rect x="371.9" y="357" width="62.9" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="374.87" y="367.5" >auto s..</text>
</g>
<g >
<title>ip_local_deliver_finish (3,250,000 samples, 8.67%)</title><rect x="961.9" y="693" width="102.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="964.87" y="703.5" >ip_local_del..</text>
</g>
<g >
<title>__fdget_pos (250,000 samples, 0.67%)</title><rect x="773.1" y="917" width="7.8" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="776.07" y="927.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_scan (250,000 samples, 0.67%)</title><rect x="151.6" y="213" width="7.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="154.60" y="223.5" ></text>
</g>
<g >
<title>ep_item_poll.isra.0 (250,000 samples, 0.67%)</title><rect x="80.8" y="677" width="7.9" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="83.80" y="687.5" ></text>
</g>
<g >
<title>[libmariadb.so.3] (1,750,000 samples, 4.67%)</title><rect x="678.7" y="869" width="55.0" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="681.67" y="879.5" >[libm..</text>
</g>
<g >
<title>std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (3,000,000 samples, 8.00%)</title><rect x="356.1" y="677" width="94.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="359.13" y="687.5" >std::__form..</text>
</g>
<g >
<title>std::enable_if&lt;is_invocable_r_v&lt;void, std::_Bind&lt;void  (14,750,000 samples, 39.33%)</title><rect x="25.7" y="901" width="464.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="28.73" y="911.5" >std::enable_if&lt;is_invocable_r_v&lt;void, std::_Bind&lt;void </text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (250,000 samples, 0.67%)</title><rect x="104.4" y="709" width="7.9" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="107.40" y="719.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_on_replacement_field (2,000,000 samples, 5.33%)</title><rect x="371.9" y="421" width="62.9" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="374.87" y="431.5" >std::_..</text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__write&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; (250,000 samples, 0.67%)</title><rect x="246.0" y="69" width="7.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="249.00" y="79.5" ></text>
</g>
<g >
<title>void std::basic_format_arg&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt;::handle::_S_format&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; const&gt; (500,000 samples, 1.33%)</title><rect x="198.8" y="325" width="15.7" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="201.80" y="335.5" ></text>
</g>
<g >
<title>std::mutex::unlock (250,000 samples, 0.67%)</title><rect x="65.1" y="725" width="7.8" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="68.07" y="735.5" ></text>
</g>
<g >
<title>inode_permission (500,000 samples, 1.33%)</title><rect x="576.4" y="821" width="15.7" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="579.40" y="831.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_pbump (250,000 samples, 0.67%)</title><rect x="1166.4" y="997" width="7.9" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1169.40" y="1007.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::chrono::operator&lt;&lt; &lt;char, std::char_traits&lt;char&gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1,000,000 samples, 2.67%)</title><rect x="230.3" y="501" width="31.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="233.27" y="511.5" >st..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5,750,000 samples, 15.33%)</title><rect x="773.1" y="965" width="180.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="776.07" y="975.5" >entry_SYSCALL_64_after_..</text>
</g>
<g >
<title>std::basic_format_args&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt;::basic_format_args&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned int&gt; (250,000 samples, 0.67%)</title><rect x="285.3" y="741" width="7.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="288.33" y="751.5" ></text>
</g>
<g >
<title>tcp_sendmsg (4,750,000 samples, 12.67%)</title><rect x="954.0" y="917" width="149.5" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="957.00" y="927.5" >tcp_sendmsg</text>
</g>
<g >
<title>std::chrono::__detail::__local_time_fmt&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; std::chrono::local_time_format&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (250,000 samples, 0.67%)</title><rect x="442.7" y="597" width="7.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="445.67" y="607.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__write&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; (250,000 samples, 0.67%)</title><rect x="293.2" y="581" width="7.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="296.20" y="591.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (250,000 samples, 0.67%)</title><rect x="450.5" y="757" width="7.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="453.53" y="767.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;std::chrono::__detail::__local_time_fmt&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, char&gt;::format&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (1,000,000 samples, 2.67%)</title><rect x="230.3" y="565" width="31.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="233.27" y="575.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::format&lt;int&gt; (500,000 samples, 1.33%)</title><rect x="371.9" y="277" width="15.7" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="374.87" y="287.5" ></text>
</g>
<g >
<title>decltype (250,000 samples, 0.67%)</title><rect x="403.3" y="165" width="7.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="406.33" y="175.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_on_replacement_field (500,000 samples, 1.33%)</title><rect x="371.9" y="213" width="15.7" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="374.87" y="223.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (250,000 samples, 0.67%)</title><rect x="710.1" y="773" width="7.9" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="713.13" y="783.5" ></text>
</g>
<g >
<title>__schedule (250,000 samples, 0.67%)</title><rect x="529.2" y="837" width="7.9" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="532.20" y="847.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::unique_lock (250,000 samples, 0.67%)</title><rect x="72.9" y="757" width="7.9" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="75.93" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (250,000 samples, 0.67%)</title><rect x="505.6" y="869" width="7.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="508.60" y="879.5" ></text>
</g>
<g >
<title>handle_cd (250,000 samples, 0.67%)</title><rect x="49.3" y="789" width="7.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="52.33" y="799.5" ></text>
</g>
<g >
<title>mysqlpp::Query::store (250,000 samples, 0.67%)</title><rect x="749.5" y="949" width="7.8" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="752.47" y="959.5" ></text>
</g>
<g >
<title>__fget_light (250,000 samples, 0.67%)</title><rect x="521.3" y="869" width="7.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="524.33" y="879.5" ></text>
</g>
<g >
<title>cubictcp_acked (250,000 samples, 0.67%)</title><rect x="1040.5" y="597" width="7.9" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1043.53" y="607.5" ></text>
</g>
<g >
<title>auto std::__format::__pack_arg_types&lt;5, 5ul&gt; (250,000 samples, 0.67%)</title><rect x="49.3" y="709" width="7.9" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="52.33" y="719.5" ></text>
</g>
<g >
<title>decltype (500,000 samples, 1.33%)</title><rect x="198.8" y="629" width="15.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="201.80" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (250,000 samples, 0.67%)</title><rect x="41.5" y="741" width="7.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="44.47" y="751.5" ></text>
</g>
<g >
<title>do_syscall_64 (750,000 samples, 2.00%)</title><rect x="513.5" y="917" width="23.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="516.47" y="927.5" >d..</text>
</g>
<g >
<title>std::vformat[abi:cxx11] (500,000 samples, 1.33%)</title><rect x="371.9" y="261" width="15.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="374.87" y="271.5" ></text>
</g>
<g >
<title>void minilog::details::log_generic&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, unsigned short&gt; (2,750,000 samples, 7.33%)</title><rect x="214.5" y="757" width="86.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="217.53" y="767.5" >void minil..</text>
</g>
<g >
<title>decltype (250,000 samples, 0.67%)</title><rect x="151.6" y="149" width="7.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="154.60" y="159.5" ></text>
</g>
<g >
<title>std::__format::_Sink&lt;char&gt;::_M_write (250,000 samples, 0.67%)</title><rect x="293.2" y="565" width="7.9" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="296.20" y="575.5" ></text>
</g>
<g >
<title>auto std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (250,000 samples, 0.67%)</title><rect x="419.1" y="149" width="7.8" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="422.07" y="159.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, Connection*, std::default_delete&lt;Connection&gt; &gt;::_M_head (250,000 samples, 0.67%)</title><rect x="489.9" y="853" width="7.8" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="492.87" y="863.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (1,750,000 samples, 4.67%)</title><rect x="985.5" y="597" width="55.0" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="988.47" y="607.5" >__wak..</text>
</g>
<g >
<title>std::unique_ptr&lt;Sock, std::default_delete&lt;Sock&gt; &gt;::operator (250,000 samples, 0.67%)</title><rect x="458.4" y="773" width="7.9" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="461.40" y="783.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_on_replacement_field (500,000 samples, 1.33%)</title><rect x="198.8" y="677" width="15.7" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="201.80" y="687.5" ></text>
</g>
<g >
<title>unsigned long std::__format::_Spec&lt;char&gt;::_M_get_width&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="379.7" y="101" width="7.9" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="382.73" y="111.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__do_vformat_to&lt;std::__format::_Sink_iter&lt;char&gt;, char, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (750,000 samples, 2.00%)</title><rect x="151.6" y="437" width="23.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="154.60" y="447.5" >s..</text>
</g>
<g >
<title>auto std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (500,000 samples, 1.33%)</title><rect x="198.8" y="613" width="15.7" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="201.80" y="623.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__do_vformat_to&lt;std::__format::_Sink_iter&lt;char&gt;, char, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="151.6" y="229" width="7.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="154.60" y="239.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;long long, char&gt;::format&lt;std::__format::_Sink_iter&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="419.1" y="133" width="7.8" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="422.07" y="143.5" ></text>
</g>
<g >
<title>recv (250,000 samples, 0.67%)</title><rect x="733.7" y="869" width="7.9" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="736.73" y="879.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (750,000 samples, 2.00%)</title><rect x="316.8" y="741" width="23.6" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="319.80" y="751.5" >s..</text>
</g>
<g >
<title>do_epoll_ctl (250,000 samples, 0.67%)</title><rect x="80.8" y="693" width="7.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="83.80" y="703.5" ></text>
</g>
<g >
<title>__fget_files (250,000 samples, 0.67%)</title><rect x="450.5" y="677" width="7.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="453.53" y="687.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__formatter_str&lt;char&gt;::format&lt;std::__format::_Sink_iter&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="293.2" y="597" width="7.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="296.20" y="607.5" ></text>
</g>
<g >
<title>std::basic_format_parse_context&lt;char&gt;::iterator std::formatter&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, char&gt;::parse&lt;std::basic_format_parse_context&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="206.7" y="309" width="7.8" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="209.67" y="319.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;std::chrono::__detail::__local_time_fmt&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, char&gt;::format&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (1,250,000 samples, 3.33%)</title><rect x="135.9" y="565" width="39.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="138.87" y="575.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (250,000 samples, 0.67%)</title><rect x="395.5" y="213" width="7.8" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="398.47" y="223.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::~basic_format_context (250,000 samples, 0.67%)</title><rect x="167.3" y="229" width="7.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="170.33" y="239.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_format&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (1,750,000 samples, 4.67%)</title><rect x="371.9" y="309" width="55.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="374.87" y="319.5" >std::..</text>
</g>
<g >
<title>do_epoll_ctl (250,000 samples, 0.67%)</title><rect x="33.6" y="709" width="7.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="36.60" y="719.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_format_to_ostream&lt;std::chrono::__detail::__local_time_fmt&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (500,000 samples, 1.33%)</title><rect x="198.8" y="533" width="15.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="201.80" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (16,750,000 samples, 44.67%)</title><rect x="17.9" y="997" width="527.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="20.87" y="1007.5" >[libc.so.6]</text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__do_vformat_to&lt;std::__format::_Sink_iter&lt;char&gt;, char, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="246.0" y="229" width="7.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="249.00" y="239.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_format_to_ostream&lt;std::chrono::__detail::__local_time_fmt&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (1,000,000 samples, 2.67%)</title><rect x="230.3" y="533" width="31.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="233.27" y="543.5" >st..</text>
</g>
<g >
<title>do_syscall_64 (500,000 samples, 1.33%)</title><rect x="25.7" y="741" width="15.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="28.73" y="751.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_format&lt;std::chrono::__detail::__local_time_fmt&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (500,000 samples, 1.33%)</title><rect x="198.8" y="549" width="15.7" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="201.80" y="559.5" ></text>
</g>
<g >
<title>std::__format::_Seq_sink&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_M_overflow (250,000 samples, 0.67%)</title><rect x="190.9" y="709" width="7.9" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="193.93" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (250,000 samples, 0.67%)</title><rect x="395.5" y="229" width="7.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="398.47" y="239.5" ></text>
</g>
<g >
<title>char const* std::__format::__formatter_int&lt;char&gt;::_M_parse&lt;long long&gt; (250,000 samples, 0.67%)</title><rect x="159.5" y="133" width="7.8" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="162.47" y="143.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;int, char&gt;::format&lt;std::__format::_Sink_iter&lt;char&gt; &gt; (500,000 samples, 1.33%)</title><rect x="371.9" y="133" width="15.7" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="374.87" y="143.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6,250,000 samples, 16.67%)</title><rect x="954.0" y="981" width="196.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="957.00" y="991.5" >entry_SYSCALL_64_after_hw..</text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_F&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="151.6" y="277" width="7.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="154.60" y="287.5" ></text>
</g>
<g >
<title>std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (1,500,000 samples, 4.00%)</title><rect x="222.4" y="661" width="47.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="225.40" y="671.5" >std:..</text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__write&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; (250,000 samples, 0.67%)</title><rect x="238.1" y="277" width="7.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="241.13" y="287.5" ></text>
</g>
<g >
<title>__x64_sys_readlink (500,000 samples, 1.33%)</title><rect x="631.5" y="917" width="15.7" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="634.47" y="927.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt; &gt; &gt;::operator[] (500,000 samples, 1.33%)</title><rect x="497.7" y="933" width="15.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="500.73" y="943.5" ></text>
</g>
<g >
<title>__get_user_8 (500,000 samples, 1.33%)</title><rect x="718.0" y="757" width="15.7" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="721.00" y="767.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,000,000 samples, 2.67%)</title><rect x="702.3" y="821" width="31.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="705.27" y="831.5" >do..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::format&lt;std::chrono::zoned_time&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::time_zone const*&gt;&amp;, char const*, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (250,000 samples, 0.67%)</title><rect x="49.3" y="741" width="7.9" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="52.33" y="751.5" ></text>
</g>
<g >
<title>decltype (500,000 samples, 1.33%)</title><rect x="371.9" y="181" width="15.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="374.87" y="191.5" ></text>
</g>
<g >
<title>[unknown] (250,000 samples, 0.67%)</title><rect x="552.8" y="965" width="7.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="555.80" y="975.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt; &gt; &gt;::operator[] (250,000 samples, 0.67%)</title><rect x="537.1" y="949" width="7.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="540.07" y="959.5" ></text>
</g>
<g >
<title>tcp_data_queue (500,000 samples, 1.33%)</title><rect x="1048.4" y="613" width="15.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1051.40" y="623.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, char&gt;::format&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (1,750,000 samples, 4.67%)</title><rect x="371.9" y="325" width="55.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="374.87" y="335.5" >std::..</text>
</g>
<g >
<title>link_path_walk.part.0.constprop.0 (1,000,000 samples, 2.67%)</title><rect x="576.4" y="837" width="31.5" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="579.40" y="847.5" >li..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (250,000 samples, 0.67%)</title><rect x="104.4" y="725" width="7.9" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="107.40" y="735.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,000,000 samples, 2.67%)</title><rect x="702.3" y="837" width="31.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="705.27" y="847.5" >en..</text>
</g>
<g >
<title>Json::FastWriter::FastWriter (250,000 samples, 0.67%)</title><rect x="88.7" y="773" width="7.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="91.67" y="783.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (4,500,000 samples, 12.00%)</title><rect x="954.0" y="885" width="141.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="957.00" y="895.5" >__tcp_push_pending..</text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_on_replacement_field (250,000 samples, 0.67%)</title><rect x="293.2" y="693" width="7.9" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="296.20" y="703.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_format&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (750,000 samples, 2.00%)</title><rect x="151.6" y="293" width="23.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="154.60" y="303.5" >s..</text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::size (250,000 samples, 0.67%)</title><rect x="246.0" y="37" width="7.9" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="249.00" y="47.5" ></text>
</g>
<g >
<title>decltype (250,000 samples, 0.67%)</title><rect x="419.1" y="69" width="7.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="422.07" y="79.5" ></text>
</g>
<g >
<title>path_lookupat (1,000,000 samples, 2.67%)</title><rect x="576.4" y="853" width="31.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="579.40" y="863.5" >pa..</text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;unsigned int, char&gt;::format&lt;std::__format::_Sink_iter&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="364.0" y="613" width="7.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="367.00" y="623.5" ></text>
</g>
<g >
<title>Json::Reader::~Reader (250,000 samples, 0.67%)</title><rect x="41.5" y="757" width="7.8" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="44.47" y="767.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;Connection*, std::default_delete&lt;Connection&gt; &gt; &gt;::type const&amp; std::get&lt;0ul, Connection*, std::default_delete&lt;Connection&gt; &gt; (250,000 samples, 0.67%)</title><rect x="489.9" y="869" width="7.8" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="492.87" y="879.5" ></text>
</g>
<g >
<title>std::vformat[abi:cxx11] (2,000,000 samples, 5.33%)</title><rect x="371.9" y="469" width="62.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="374.87" y="479.5" >std::v..</text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_format&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="198.8" y="293" width="7.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="201.80" y="303.5" ></text>
</g>
<g >
<title>std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (500,000 samples, 1.33%)</title><rect x="371.9" y="197" width="15.7" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="374.87" y="207.5" ></text>
</g>
<g >
<title>std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (1,500,000 samples, 4.00%)</title><rect x="135.9" y="661" width="47.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="138.87" y="671.5" >std:..</text>
</g>
<g >
<title>do_softirq (3,750,000 samples, 10.00%)</title><rect x="954.0" y="789" width="118.0" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="957.00" y="799.5" >do_softirq</text>
</g>
<g >
<title>decltype (2,000,000 samples, 5.33%)</title><rect x="371.9" y="389" width="62.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="374.87" y="399.5" >decltype</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::format&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; const&amp;&gt; (750,000 samples, 2.00%)</title><rect x="238.1" y="469" width="23.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="241.13" y="479.5" >s..</text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, char&gt;::format&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="198.8" y="309" width="7.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="201.80" y="319.5" ></text>
</g>
<g >
<title>queue_work_on (4,250,000 samples, 11.33%)</title><rect x="812.4" y="837" width="133.7" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="815.40" y="847.5" >queue_work_on</text>
</g>
<g >
<title>__send (6,250,000 samples, 16.67%)</title><rect x="954.0" y="997" width="196.7" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="957.00" y="1007.5" >__send</text>
</g>
<g >
<title>decltype (750,000 samples, 2.00%)</title><rect x="151.6" y="373" width="23.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="154.60" y="383.5" >d..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::format&lt;std::chrono::zoned_time&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::time_zone const*&gt;&amp;, char const*, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (500,000 samples, 1.33%)</title><rect x="198.8" y="741" width="15.7" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="201.80" y="751.5" ></text>
</g>
<g >
<title>void minilog::details::log_generic&lt;int&gt; (2,250,000 samples, 6.00%)</title><rect x="128.0" y="757" width="70.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="131.00" y="767.5" >void min..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (250,000 samples, 0.67%)</title><rect x="765.2" y="981" width="7.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="768.20" y="991.5" ></text>
</g>
<g >
<title>std::basic_format_args&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt;::basic_format_args&lt;std::basic_format_arg&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt;::handle, char const*, unsigned int, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (250,000 samples, 0.67%)</title><rect x="49.3" y="725" width="7.9" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="52.33" y="735.5" ></text>
</g>
<g >
<title>auto std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (250,000 samples, 0.67%)</title><rect x="96.5" y="645" width="7.9" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="99.53" y="655.5" ></text>
</g>
<g >
<title>Epoller::rwcfg (500,000 samples, 1.33%)</title><rect x="25.7" y="789" width="15.8" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="28.73" y="799.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_S&lt;std::chrono::hh_mm_ss&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="167.3" y="261" width="7.9" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="170.33" y="271.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (3,000,000 samples, 8.00%)</title><rect x="969.7" y="661" width="94.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="972.73" y="671.5" >tcp_v4_rcv</text>
</g>
<g >
<title>sock_def_readable (250,000 samples, 0.67%)</title><rect x="1056.3" y="597" width="7.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1059.27" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (500,000 samples, 1.33%)</title><rect x="466.3" y="805" width="15.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="469.27" y="815.5" ></text>
</g>
<g >
<title>__fget_light (250,000 samples, 0.67%)</title><rect x="450.5" y="693" width="7.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="453.53" y="703.5" ></text>
</g>
<g >
<title>std::chrono::zoned_time&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::time_zone const*&gt;::get_info (250,000 samples, 0.67%)</title><rect x="175.2" y="565" width="7.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="178.20" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (250,000 samples, 0.67%)</title><rect x="183.1" y="725" width="7.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="186.07" y="735.5" ></text>
</g>
<g >
<title>vfs_write (5,500,000 samples, 14.67%)</title><rect x="780.9" y="917" width="173.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="783.93" y="927.5" >vfs_write</text>
</g>
<g >
<title>unsigned long std::__format::_Spec&lt;char&gt;::_M_get_width&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="419.1" y="85" width="7.8" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="422.07" y="95.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::format&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; const&amp;&gt; (1,000,000 samples, 2.67%)</title><rect x="143.7" y="469" width="31.5" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="146.73" y="479.5" >st..</text>
</g>
<g >
<title>void std::__invoke_impl&lt;void, std::_Bind&lt;void  (14,750,000 samples, 39.33%)</title><rect x="25.7" y="885" width="464.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="28.73" y="895.5" >void std::__invoke_impl&lt;void, std::_Bind&lt;void </text>
</g>
<g >
<title>void std::basic_format_arg&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt;::handle::_S_format&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; const&gt; (2,000,000 samples, 5.33%)</title><rect x="371.9" y="341" width="62.9" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="374.87" y="351.5" >void s..</text>
</g>
<g >
<title>from_kuid_munged (250,000 samples, 0.67%)</title><rect x="568.5" y="885" width="7.9" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="571.53" y="895.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__do_vformat_to&lt;std::__format::_Sink_iter&lt;char&gt;, char, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (2,000,000 samples, 5.33%)</title><rect x="371.9" y="453" width="62.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="374.87" y="463.5" >std::_..</text>
</g>
<g >
<title>mysqlpp::Query::~Query (3,250,000 samples, 8.67%)</title><rect x="655.1" y="981" width="102.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="658.07" y="991.5" >mysqlpp::Que..</text>
</g>
<g >
<title>n_tty_write (5,000,000 samples, 13.33%)</title><rect x="788.8" y="869" width="157.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="791.80" y="879.5" >n_tty_write</text>
</g>
<g >
<title>__schedule (250,000 samples, 0.67%)</title><rect x="710.1" y="741" width="7.9" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="713.13" y="751.5" ></text>
</g>
<g >
<title>tcp_recvmsg (250,000 samples, 0.67%)</title><rect x="1158.5" y="901" width="7.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1161.53" y="911.5" ></text>
</g>
<g >
<title>std::__format::_Sink&lt;char&gt;::_M_write (250,000 samples, 0.67%)</title><rect x="253.9" y="229" width="7.8" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="256.87" y="239.5" ></text>
</g>
<g >
<title>std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_on_chars (250,000 samples, 0.67%)</title><rect x="198.8" y="197" width="7.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="201.80" y="207.5" ></text>
</g>
<g >
<title>__x64_sys_recvfrom (250,000 samples, 0.67%)</title><rect x="1158.5" y="949" width="7.9" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1161.53" y="959.5" ></text>
</g>
<g >
<title>std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::time_point (250,000 samples, 0.67%)</title><rect x="434.8" y="533" width="7.9" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="437.80" y="543.5" ></text>
</g>
<g >
<title>__check_object_size (250,000 samples, 0.67%)</title><rect x="780.9" y="869" width="7.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="783.93" y="879.5" ></text>
</g>
<g >
<title>std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (750,000 samples, 2.00%)</title><rect x="238.1" y="389" width="23.6" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="241.13" y="399.5" >s..</text>
</g>
<g >
<title>void minilog::log_debug&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (250,000 samples, 0.67%)</title><rect x="49.3" y="773" width="7.9" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="52.33" y="783.5" ></text>
</g>
<g >
<title>decltype (750,000 samples, 2.00%)</title><rect x="151.6" y="357" width="23.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="154.60" y="367.5" >d..</text>
</g>
<g >
<title>std::_Function_handler&lt;void  (14,750,000 samples, 39.33%)</title><rect x="25.7" y="917" width="464.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="28.73" y="927.5" >std::_Function_handler&lt;void </text>
</g>
<g >
<title>__inet_lookup_established (500,000 samples, 1.33%)</title><rect x="969.7" y="645" width="15.8" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="972.73" y="655.5" ></text>
</g>
<g >
<title>lookup_fast (250,000 samples, 0.67%)</title><rect x="600.0" y="805" width="7.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="603.00" y="815.5" ></text>
</g>
<g >
<title>decltype (500,000 samples, 1.33%)</title><rect x="371.9" y="165" width="15.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="374.87" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (250,000 samples, 0.67%)</title><rect x="1158.5" y="965" width="7.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1161.53" y="975.5" ></text>
</g>
<g >
<title>void minilog::details::log_generic&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (500,000 samples, 1.33%)</title><rect x="198.8" y="757" width="15.7" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="201.80" y="767.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::basic_string_view (250,000 samples, 0.67%)</title><rect x="120.1" y="757" width="7.9" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="123.13" y="767.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (250,000 samples, 0.67%)</title><rect x="529.2" y="869" width="7.9" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="532.20" y="879.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__do_vformat_to&lt;std::__format::_Sink_iter&lt;char&gt;, char, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (500,000 samples, 1.33%)</title><rect x="198.8" y="437" width="15.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="201.80" y="447.5" ></text>
</g>
<g >
<title>decltype (250,000 samples, 0.67%)</title><rect x="246.0" y="149" width="7.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="249.00" y="159.5" ></text>
</g>
<g >
<title> (250,000 samples, 0.67%)</title><rect x="458.4" y="757" width="7.9" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="461.40" y="767.5" ></text>
</g>
<g >
<title>touch_atime (250,000 samples, 0.67%)</title><rect x="631.5" y="885" width="7.8" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="634.47" y="895.5" ></text>
</g>
<g >
<title>ip_send_check (250,000 samples, 0.67%)</title><rect x="1072.0" y="789" width="7.9" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1075.00" y="799.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_int&lt;char&gt;::format&lt;long long, std::__format::_Sink_iter&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="246.0" y="101" width="7.9" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="249.00" y="111.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_M_split_cmpts (250,000 samples, 0.67%)</title><rect x="647.2" y="965" width="7.9" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="650.20" y="975.5" ></text>
</g>
<g >
<title>auto std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (500,000 samples, 1.33%)</title><rect x="198.8" y="341" width="15.7" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="201.80" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::format&lt;int&gt; (250,000 samples, 0.67%)</title><rect x="151.6" y="261" width="7.9" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="154.60" y="271.5" ></text>
</g>
<g >
<title>decltype (1,500,000 samples, 4.00%)</title><rect x="135.9" y="629" width="47.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="138.87" y="639.5" >decl..</text>
</g>
<g >
<title>std::vformat[abi:cxx11] (750,000 samples, 2.00%)</title><rect x="151.6" y="453" width="23.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="154.60" y="463.5" >s..</text>
</g>
<g >
<title>__do_sys_newfstatat (2,250,000 samples, 6.00%)</title><rect x="560.7" y="917" width="70.8" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="563.67" y="927.5" >__do_sy..</text>
</g>
<g >
<title>decltype (1,250,000 samples, 3.33%)</title><rect x="222.4" y="629" width="39.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="225.40" y="639.5" >dec..</text>
</g>
<g >
<title>std::to_chars_result std::__format::__formatter_int&lt;char&gt;::to_chars&lt;unsigned int&gt; (250,000 samples, 0.67%)</title><rect x="364.0" y="597" width="7.9" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="367.00" y="607.5" ></text>
</g>
<g >
<title>std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (250,000 samples, 0.67%)</title><rect x="403.3" y="197" width="7.9" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="406.33" y="207.5" ></text>
</g>
<g >
<title>std::vformat[abi:cxx11] (3,000,000 samples, 8.00%)</title><rect x="356.1" y="741" width="94.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="359.13" y="751.5" >std::vforma..</text>
</g>
<g >
<title>user_path_at_empty (250,000 samples, 0.67%)</title><rect x="639.3" y="885" width="7.9" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="642.33" y="895.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__write&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; (250,000 samples, 0.67%)</title><rect x="96.5" y="597" width="7.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="99.53" y="607.5" ></text>
</g>
<g >
<title>std::__format::_Seq_sink&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::get (250,000 samples, 0.67%)</title><rect x="395.5" y="245" width="7.8" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="398.47" y="255.5" ></text>
</g>
<g >
<title>auto std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (250,000 samples, 0.67%)</title><rect x="403.3" y="149" width="7.9" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="406.33" y="159.5" ></text>
</g>
<g >
<title>std::__format::_Sink_iter&lt;char&gt; std::__format::__do_vformat_to&lt;std::__format::_Sink_iter&lt;char&gt;, char, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="403.3" y="245" width="7.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="406.33" y="255.5" ></text>
</g>
<g >
<title>void std::basic_format_arg&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt;::handle::_S_format&lt;std::chrono::zoned_time&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::time_zone const*&gt; const&gt; (1,500,000 samples, 4.00%)</title><rect x="135.9" y="597" width="47.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="138.87" y="607.5" >void..</text>
</g>
<g >
<title>nf_hook_slow (250,000 samples, 0.67%)</title><rect x="954.0" y="677" width="7.9" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="957.00" y="687.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="230.3" y="485" width="7.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="233.27" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (500,000 samples, 1.33%)</title><rect x="1174.3" y="997" width="15.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1177.27" y="1007.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;Sock, std::default_delete&lt;Sock&gt; &gt;::_M_ptr (250,000 samples, 0.67%)</title><rect x="458.4" y="725" width="7.9" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="461.40" y="735.5" ></text>
</g>
<g >
<title>void minilog::log_debug&lt;int&gt; (2,500,000 samples, 6.67%)</title><rect x="120.1" y="773" width="78.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="123.13" y="783.5" >void mini..</text>
</g>
<g >
<title>std::unordered_map&lt;int, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt; &gt; &gt;::operator[] (500,000 samples, 1.33%)</title><rect x="104.4" y="773" width="15.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="107.40" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_check_length (250,000 samples, 0.67%)</title><rect x="741.6" y="933" width="7.9" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="744.60" y="943.5" ></text>
</g>
<g >
<title>__x64_sys_epoll_ctl (500,000 samples, 1.33%)</title><rect x="25.7" y="725" width="15.8" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="28.73" y="735.5" ></text>
</g>
<g >
<title>__x64_sys_epoll_ctl (250,000 samples, 0.67%)</title><rect x="80.8" y="709" width="7.9" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="83.80" y="719.5" ></text>
</g>
<g >
<title>user_path_at_empty (1,750,000 samples, 4.67%)</title><rect x="576.4" y="885" width="55.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="579.40" y="895.5" >user_..</text>
</g>
<g >
<title>std::span&lt;char, 18446744073709551615ul&gt;::subspan (250,000 samples, 0.67%)</title><rect x="356.1" y="565" width="7.9" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="359.13" y="575.5" ></text>
</g>
<g >
<title>do_syscall_64 (250,000 samples, 0.67%)</title><rect x="450.5" y="741" width="7.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="453.53" y="751.5" ></text>
</g>
<g >
<title>std::function&lt;void  (14,750,000 samples, 39.33%)</title><rect x="25.7" y="933" width="464.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="28.73" y="943.5" >std::function&lt;void </text>
</g>
<g >
<title>strncpy_from_user (250,000 samples, 0.67%)</title><rect x="623.6" y="853" width="7.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="626.60" y="863.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (3,750,000 samples, 10.00%)</title><rect x="954.0" y="805" width="118.0" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="957.00" y="815.5" >__local_bh_ena..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::format&lt;long&gt; (250,000 samples, 0.67%)</title><rect x="198.8" y="261" width="7.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="201.80" y="271.5" ></text>
</g>
<g >
<title>__x64_sys_sendto (6,250,000 samples, 16.67%)</title><rect x="954.0" y="949" width="196.7" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="957.00" y="959.5" >__x64_sys_sendto</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (250,000 samples, 0.67%)</title><rect x="269.6" y="677" width="7.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="272.60" y="687.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;long long, char&gt;::format&lt;std::__format::_Sink_iter&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="403.3" y="133" width="7.9" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="406.33" y="143.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_format_to_ostream&lt;std::chrono::time_point&lt;std::chrono::local_t, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (1,000,000 samples, 2.67%)</title><rect x="230.3" y="517" width="31.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="233.27" y="527.5" >st..</text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_format_to_ostream&lt;std::chrono::time_point&lt;std::chrono::local_t, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (500,000 samples, 1.33%)</title><rect x="198.8" y="517" width="15.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="201.80" y="527.5" ></text>
</g>
<g >
<title>[libc.so.6] (250,000 samples, 0.67%)</title><rect x="749.5" y="917" width="7.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="752.47" y="927.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_scan (2,000,000 samples, 5.33%)</title><rect x="371.9" y="437" width="62.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="374.87" y="447.5" >std::_..</text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_scan (1,500,000 samples, 4.00%)</title><rect x="135.9" y="693" width="47.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="138.87" y="703.5" >std:..</text>
</g>
<g >
<title>ip_rcv_finish_core.constprop.0 (250,000 samples, 0.67%)</title><rect x="1064.1" y="677" width="7.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1067.13" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (250,000 samples, 0.67%)</title><rect x="41.5" y="725" width="7.8" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="44.47" y="735.5" ></text>
</g>
<g >
<title>Json::Reader::readToken (250,000 samples, 0.67%)</title><rect x="552.8" y="949" width="7.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="555.80" y="959.5" ></text>
</g>
<g >
<title>EpollServer::bootup (16,750,000 samples, 44.67%)</title><rect x="17.9" y="965" width="527.0" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="20.87" y="975.5" >EpollServer::bootup</text>
</g>
<g >
<title>std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (250,000 samples, 0.67%)</title><rect x="419.1" y="197" width="7.8" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="422.07" y="207.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::chrono::operator&lt;&lt; &lt;char, std::char_traits&lt;char&gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (1,000,000 samples, 2.67%)</title><rect x="143.7" y="485" width="31.5" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="146.73" y="495.5" >st..</text>
</g>
<g >
<title>ipt_do_table (500,000 samples, 1.33%)</title><rect x="1079.9" y="773" width="15.7" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1082.87" y="783.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (250,000 samples, 0.67%)</title><rect x="104.4" y="741" width="7.9" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="107.40" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::format&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; const&amp;&gt; (500,000 samples, 1.33%)</title><rect x="198.8" y="469" width="15.7" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="201.80" y="479.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, char&gt;::format&lt;std::__format::_Sink_iter&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="356.1" y="613" width="7.9" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="359.13" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (250,000 samples, 0.67%)</title><rect x="497.7" y="917" width="7.9" height="15.0" fill="rgb(246,193,46)" rx="2" ry="2" />
<text  x="500.73" y="927.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_S&lt;std::chrono::hh_mm_ss&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="253.9" y="261" width="7.8" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="256.87" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (250,000 samples, 0.67%)</title><rect x="112.3" y="741" width="7.8" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="115.27" y="751.5" ></text>
</g>
<g >
<title>[libc.so.6] (250,000 samples, 0.67%)</title><rect x="544.9" y="965" width="7.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="547.93" y="975.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;std::chrono::zoned_time&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::time_zone const*&gt;, char&gt;::format&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (500,000 samples, 1.33%)</title><rect x="198.8" y="581" width="15.7" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="201.80" y="591.5" ></text>
</g>
<g >
<title>std::reverse_iterator&lt;std::__format::_Arg_t const*&gt;::reverse_iterator (250,000 samples, 0.67%)</title><rect x="49.3" y="693" width="7.9" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="52.33" y="703.5" ></text>
</g>
<g >
<title>std::__format::_Spec&lt;char&gt;::_M_parse_width (250,000 samples, 0.67%)</title><rect x="151.6" y="85" width="7.9" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="154.60" y="95.5" ></text>
</g>
<g >
<title>std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (250,000 samples, 0.67%)</title><rect x="159.5" y="181" width="7.8" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="162.47" y="191.5" ></text>
</g>
<g >
<title>process_backlog (3,750,000 samples, 10.00%)</title><rect x="954.0" y="725" width="118.0" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="957.00" y="735.5" >process_backlog</text>
</g>
<g >
<title>ip_rcv (250,000 samples, 0.67%)</title><rect x="1064.1" y="693" width="7.9" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1067.13" y="703.5" ></text>
</g>
<g >
<title>getname_flags.part.0 (750,000 samples, 2.00%)</title><rect x="607.9" y="869" width="23.6" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="610.87" y="879.5" >g..</text>
</g>
<g >
<title>std::vformat[abi:cxx11] (1,750,000 samples, 4.67%)</title><rect x="214.5" y="725" width="55.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="217.53" y="735.5" >std::..</text>
</g>
<g >
<title>file_tty_write.constprop.0 (5,500,000 samples, 14.67%)</title><rect x="780.9" y="885" width="173.1" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="783.93" y="895.5" >file_tty_write.constpr..</text>
</g>
<g >
<title>tcp_recvmsg_locked (250,000 samples, 0.67%)</title><rect x="1158.5" y="885" width="7.9" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1161.53" y="895.5" ></text>
</g>
<g >
<title>do_syscall_64 (500,000 samples, 1.33%)</title><rect x="631.5" y="933" width="15.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="634.47" y="943.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_on_replacement_field (250,000 samples, 0.67%)</title><rect x="419.1" y="213" width="7.8" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="422.07" y="223.5" ></text>
</g>
<g >
<title>std::__format::_Sink&lt;char&gt;::_M_write (250,000 samples, 0.67%)</title><rect x="238.1" y="261" width="7.9" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="241.13" y="271.5" ></text>
</g>
<g >
<title>malloc (250,000 samples, 0.67%)</title><rect x="1150.7" y="997" width="7.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1153.67" y="1007.5" ></text>
</g>
<g >
<title>std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (250,000 samples, 0.67%)</title><rect x="96.5" y="693" width="7.9" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="99.53" y="703.5" ></text>
</g>
<g >
<title>cp_new_stat (500,000 samples, 1.33%)</title><rect x="560.7" y="901" width="15.7" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="563.67" y="911.5" ></text>
</g>
<g >
<title>__netif_receive_skb_one_core (3,750,000 samples, 10.00%)</title><rect x="954.0" y="709" width="118.0" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="957.00" y="719.5" >__netif_receiv..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; std::format&lt;std::chrono::zoned_time&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::time_zone const*&gt;&amp;, char const*, unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (3,250,000 samples, 8.67%)</title><rect x="348.3" y="757" width="102.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="351.27" y="767.5" >std::__cxx11..</text>
</g>
<g >
<title>ep_item_poll.isra.0 (250,000 samples, 0.67%)</title><rect x="33.6" y="693" width="7.9" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="36.60" y="703.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;long long, char&gt;::format&lt;std::__format::_Sink_iter&lt;char&gt; &gt; (250,000 samples, 0.67%)</title><rect x="246.0" y="117" width="7.9" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="249.00" y="127.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_scan (750,000 samples, 2.00%)</title><rect x="238.1" y="421" width="23.6" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="241.13" y="431.5" >s..</text>
</g>
<g >
<title>pthread_mutex_unlock (250,000 samples, 0.67%)</title><rect x="65.1" y="709" width="7.8" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="68.07" y="719.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_format&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (750,000 samples, 2.00%)</title><rect x="238.1" y="293" width="23.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="241.13" y="303.5" >s..</text>
</g>
<g >
<title>__virt_addr_valid (250,000 samples, 0.67%)</title><rect x="623.6" y="821" width="7.9" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="626.60" y="831.5" ></text>
</g>
<g >
<title>[libmariadb.so.3] (2,250,000 samples, 6.00%)</title><rect x="670.8" y="901" width="70.8" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="673.80" y="911.5" >[libmar..</text>
</g>
<g >
<title>__softirqentry_text_start (3,750,000 samples, 10.00%)</title><rect x="954.0" y="773" width="118.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="957.00" y="783.5" >__softirqentry..</text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;std::chrono::__detail::__local_time_fmt&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, char&gt;::format&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (500,000 samples, 1.33%)</title><rect x="198.8" y="565" width="15.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="201.80" y="575.5" ></text>
</g>
<g >
<title>decltype (250,000 samples, 0.67%)</title><rect x="159.5" y="149" width="7.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="162.47" y="159.5" ></text>
</g>
<g >
<title>decltype (250,000 samples, 0.67%)</title><rect x="403.3" y="181" width="7.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="406.33" y="191.5" ></text>
</g>
<g >
<title>auto std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (750,000 samples, 2.00%)</title><rect x="151.6" y="341" width="23.6" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="154.60" y="351.5" >a..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (250,000 samples, 0.67%)</title><rect x="269.6" y="693" width="7.9" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="272.60" y="703.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_scan (250,000 samples, 0.67%)</title><rect x="96.5" y="725" width="7.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="99.53" y="735.5" ></text>
</g>
<g >
<title>[unknown] (250,000 samples, 0.67%)</title><rect x="10.0" y="981" width="7.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="991.5" ></text>
</g>
<g >
<title>std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (500,000 samples, 1.33%)</title><rect x="198.8" y="661" width="15.7" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="201.80" y="671.5" ></text>
</g>
<g >
<title>Epoller::rwcfg (500,000 samples, 1.33%)</title><rect x="450.5" y="789" width="15.8" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="453.53" y="799.5" ></text>
</g>
<g >
<title>auto std::__format::_Formatting_scanner&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::_M_format_arg (3,000,000 samples, 8.00%)</title><rect x="356.1" y="629" width="94.4" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="359.13" y="639.5" >auto std::_..</text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::formatter&lt;std::chrono::zoned_time&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::time_zone const*&gt;, char&gt;::format&lt;std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (1,000,000 samples, 2.67%)</title><rect x="230.3" y="581" width="31.4" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="233.27" y="591.5" >st..</text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_R_T&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (500,000 samples, 1.33%)</title><rect x="246.0" y="277" width="15.7" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="249.00" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unique_ptr&lt;Connection, std::default_delete&lt;Connection&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (500,000 samples, 1.33%)</title><rect x="104.4" y="757" width="15.7" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="107.40" y="767.5" ></text>
</g>
<g >
<title>std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt;::iterator std::__format::__formatter_chrono&lt;char&gt;::_M_R_T&lt;std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;, std::basic_format_context&lt;std::__format::_Sink_iter&lt;char&gt;, char&gt; &gt; (500,000 samples, 1.33%)</title><rect x="159.5" y="277" width="15.7" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="162.47" y="287.5" ></text>
</g>
<g >
<title>std::__format::_Scanner&lt;char&gt;::_M_on_replacement_field (750,000 samples, 2.00%)</title><rect x="238.1" y="405" width="23.6" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="241.13" y="415.5" >s..</text>
</g>
<g >
<title>write (5,750,000 samples, 15.33%)</title><rect x="773.1" y="981" width="180.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="776.07" y="991.5" >write</text>
</g>
<g >
<title>mysqlpp::Query::reset (250,000 samples, 0.67%)</title><rect x="741.6" y="949" width="7.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="744.60" y="959.5" ></text>
</g>
<g >
<title>sock_poll (250,000 samples, 0.67%)</title><rect x="80.8" y="661" width="7.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="83.80" y="671.5" ></text>
</g>
<g >
<title>sock_def_readable (1,750,000 samples, 4.67%)</title><rect x="985.5" y="613" width="55.0" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="988.47" y="623.5" >sock_..</text>
</g>
<g >
<title>std::vformat[abi:cxx11] (500,000 samples, 1.33%)</title><rect x="198.8" y="453" width="15.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="201.80" y="463.5" ></text>
</g>
<g >
<title>tty_insert_flip_string_and_push_buffer (4,250,000 samples, 11.33%)</title><rect x="812.4" y="853" width="133.7" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="815.40" y="863.5" >tty_insert_flip_..</text>
</g>
<g >
<title>do_epoll_wait (500,000 samples, 1.33%)</title><rect x="521.3" y="885" width="15.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="524.33" y="895.5" ></text>
</g>
</g>
</svg>
