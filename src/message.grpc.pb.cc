// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: message.proto

#include "message.pb.h"
#include "message.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include "server/epoll_server.hpp"
namespace tinychat {

static const char* EpollServices_method_names[] = {
  "/tinychat.EpollServices/Login",
  "/tinychat.EpollServices/SignUp",
  "/tinychat.EpollServices/CreateGroup",
  "/tinychat.EpollServices/QueryUsername",
  "/tinychat.EpollServices/ChangeGroup",
  "/tinychat.EpollServices/JoinGroup",
  "/tinychat.EpollServices/QueryHistory",
};
std::unique_ptr< EpollServices::Stub> EpollServices::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EpollServices::Stub> stub(new EpollServices::Stub(channel, options));
  return stub;
}

EpollServices::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Login_(EpollServices_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignUp_(EpollServices_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateGroup_(EpollServices_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryUsername_(EpollServices_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeGroup_(EpollServices_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JoinGroup_(EpollServices_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryHistory_(EpollServices_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EpollServices::Stub::Login(::grpc::ClientContext* context, const ::tinychat::LoginArg& request, ::tinychat::LoginReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinychat::LoginArg, ::tinychat::LoginReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void EpollServices::Stub::async::Login(::grpc::ClientContext* context, const ::tinychat::LoginArg* request, ::tinychat::LoginReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinychat::LoginArg, ::tinychat::LoginReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void EpollServices::Stub::async::Login(::grpc::ClientContext* context, const ::tinychat::LoginArg* request, ::tinychat::LoginReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinychat::LoginReply>* EpollServices::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::tinychat::LoginArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinychat::LoginReply, ::tinychat::LoginArg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinychat::LoginReply>* EpollServices::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::tinychat::LoginArg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EpollServices::Stub::SignUp(::grpc::ClientContext* context, const ::tinychat::SignUpArg& request, ::tinychat::SignUpReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinychat::SignUpArg, ::tinychat::SignUpReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignUp_, context, request, response);
}

void EpollServices::Stub::async::SignUp(::grpc::ClientContext* context, const ::tinychat::SignUpArg* request, ::tinychat::SignUpReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinychat::SignUpArg, ::tinychat::SignUpReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignUp_, context, request, response, std::move(f));
}

void EpollServices::Stub::async::SignUp(::grpc::ClientContext* context, const ::tinychat::SignUpArg* request, ::tinychat::SignUpReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignUp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinychat::SignUpReply>* EpollServices::Stub::PrepareAsyncSignUpRaw(::grpc::ClientContext* context, const ::tinychat::SignUpArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinychat::SignUpReply, ::tinychat::SignUpArg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignUp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinychat::SignUpReply>* EpollServices::Stub::AsyncSignUpRaw(::grpc::ClientContext* context, const ::tinychat::SignUpArg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignUpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EpollServices::Stub::CreateGroup(::grpc::ClientContext* context, const ::tinychat::CreateGroupArg& request, ::tinychat::CreateGroupReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinychat::CreateGroupArg, ::tinychat::CreateGroupReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateGroup_, context, request, response);
}

void EpollServices::Stub::async::CreateGroup(::grpc::ClientContext* context, const ::tinychat::CreateGroupArg* request, ::tinychat::CreateGroupReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinychat::CreateGroupArg, ::tinychat::CreateGroupReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateGroup_, context, request, response, std::move(f));
}

void EpollServices::Stub::async::CreateGroup(::grpc::ClientContext* context, const ::tinychat::CreateGroupArg* request, ::tinychat::CreateGroupReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinychat::CreateGroupReply>* EpollServices::Stub::PrepareAsyncCreateGroupRaw(::grpc::ClientContext* context, const ::tinychat::CreateGroupArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinychat::CreateGroupReply, ::tinychat::CreateGroupArg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinychat::CreateGroupReply>* EpollServices::Stub::AsyncCreateGroupRaw(::grpc::ClientContext* context, const ::tinychat::CreateGroupArg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EpollServices::Stub::QueryUsername(::grpc::ClientContext* context, const ::tinychat::QueryUsernameArg& request, ::tinychat::QueryUsernameReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinychat::QueryUsernameArg, ::tinychat::QueryUsernameReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryUsername_, context, request, response);
}

void EpollServices::Stub::async::QueryUsername(::grpc::ClientContext* context, const ::tinychat::QueryUsernameArg* request, ::tinychat::QueryUsernameReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinychat::QueryUsernameArg, ::tinychat::QueryUsernameReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryUsername_, context, request, response, std::move(f));
}

void EpollServices::Stub::async::QueryUsername(::grpc::ClientContext* context, const ::tinychat::QueryUsernameArg* request, ::tinychat::QueryUsernameReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryUsername_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinychat::QueryUsernameReply>* EpollServices::Stub::PrepareAsyncQueryUsernameRaw(::grpc::ClientContext* context, const ::tinychat::QueryUsernameArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinychat::QueryUsernameReply, ::tinychat::QueryUsernameArg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryUsername_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinychat::QueryUsernameReply>* EpollServices::Stub::AsyncQueryUsernameRaw(::grpc::ClientContext* context, const ::tinychat::QueryUsernameArg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryUsernameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EpollServices::Stub::ChangeGroup(::grpc::ClientContext* context, const ::tinychat::ChangeGroupArg& request, ::tinychat::ChangeGroupReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinychat::ChangeGroupArg, ::tinychat::ChangeGroupReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangeGroup_, context, request, response);
}

void EpollServices::Stub::async::ChangeGroup(::grpc::ClientContext* context, const ::tinychat::ChangeGroupArg* request, ::tinychat::ChangeGroupReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinychat::ChangeGroupArg, ::tinychat::ChangeGroupReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeGroup_, context, request, response, std::move(f));
}

void EpollServices::Stub::async::ChangeGroup(::grpc::ClientContext* context, const ::tinychat::ChangeGroupArg* request, ::tinychat::ChangeGroupReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinychat::ChangeGroupReply>* EpollServices::Stub::PrepareAsyncChangeGroupRaw(::grpc::ClientContext* context, const ::tinychat::ChangeGroupArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinychat::ChangeGroupReply, ::tinychat::ChangeGroupArg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangeGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinychat::ChangeGroupReply>* EpollServices::Stub::AsyncChangeGroupRaw(::grpc::ClientContext* context, const ::tinychat::ChangeGroupArg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangeGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EpollServices::Stub::JoinGroup(::grpc::ClientContext* context, const ::tinychat::JoinGroupArg& request, ::tinychat::JoinGroupReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinychat::JoinGroupArg, ::tinychat::JoinGroupReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_JoinGroup_, context, request, response);
}

void EpollServices::Stub::async::JoinGroup(::grpc::ClientContext* context, const ::tinychat::JoinGroupArg* request, ::tinychat::JoinGroupReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinychat::JoinGroupArg, ::tinychat::JoinGroupReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinGroup_, context, request, response, std::move(f));
}

void EpollServices::Stub::async::JoinGroup(::grpc::ClientContext* context, const ::tinychat::JoinGroupArg* request, ::tinychat::JoinGroupReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinychat::JoinGroupReply>* EpollServices::Stub::PrepareAsyncJoinGroupRaw(::grpc::ClientContext* context, const ::tinychat::JoinGroupArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinychat::JoinGroupReply, ::tinychat::JoinGroupArg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_JoinGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinychat::JoinGroupReply>* EpollServices::Stub::AsyncJoinGroupRaw(::grpc::ClientContext* context, const ::tinychat::JoinGroupArg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncJoinGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EpollServices::Stub::QueryHistory(::grpc::ClientContext* context, const ::tinychat::QueryHistoryArg& request, ::tinychat::QueryHistoryReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinychat::QueryHistoryArg, ::tinychat::QueryHistoryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryHistory_, context, request, response);
}

void EpollServices::Stub::async::QueryHistory(::grpc::ClientContext* context, const ::tinychat::QueryHistoryArg* request, ::tinychat::QueryHistoryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinychat::QueryHistoryArg, ::tinychat::QueryHistoryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryHistory_, context, request, response, std::move(f));
}

void EpollServices::Stub::async::QueryHistory(::grpc::ClientContext* context, const ::tinychat::QueryHistoryArg* request, ::tinychat::QueryHistoryReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryHistory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinychat::QueryHistoryReply>* EpollServices::Stub::PrepareAsyncQueryHistoryRaw(::grpc::ClientContext* context, const ::tinychat::QueryHistoryArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinychat::QueryHistoryReply, ::tinychat::QueryHistoryArg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryHistory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinychat::QueryHistoryReply>* EpollServices::Stub::AsyncQueryHistoryRaw(::grpc::ClientContext* context, const ::tinychat::QueryHistoryArg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryHistoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

EpollServices::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EpollServices_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EpollServices::Service, ::tinychat::LoginArg, ::tinychat::LoginReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EpollServices::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinychat::LoginArg* req,
             ::tinychat::LoginReply* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EpollServices_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EpollServices::Service, ::tinychat::SignUpArg, ::tinychat::SignUpReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EpollServices::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinychat::SignUpArg* req,
             ::tinychat::SignUpReply* resp) {
               return service->SignUp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EpollServices_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EpollServices::Service, ::tinychat::CreateGroupArg, ::tinychat::CreateGroupReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EpollServices::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinychat::CreateGroupArg* req,
             ::tinychat::CreateGroupReply* resp) {
               return service->CreateGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EpollServices_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EpollServices::Service, ::tinychat::QueryUsernameArg, ::tinychat::QueryUsernameReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EpollServices::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinychat::QueryUsernameArg* req,
             ::tinychat::QueryUsernameReply* resp) {
               return service->QueryUsername(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EpollServices_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EpollServices::Service, ::tinychat::ChangeGroupArg, ::tinychat::ChangeGroupReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EpollServices::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinychat::ChangeGroupArg* req,
             ::tinychat::ChangeGroupReply* resp) {
               return service->ChangeGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EpollServices_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EpollServices::Service, ::tinychat::JoinGroupArg, ::tinychat::JoinGroupReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EpollServices::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinychat::JoinGroupArg* req,
             ::tinychat::JoinGroupReply* resp) {
               return service->JoinGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EpollServices_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EpollServices::Service, ::tinychat::QueryHistoryArg, ::tinychat::QueryHistoryReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EpollServices::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinychat::QueryHistoryArg* req,
             ::tinychat::QueryHistoryReply* resp) {
               return service->QueryHistory(ctx, req, resp);
             }, this)));
}

EpollServices::Service::~Service() {
}

::grpc::Status EpollServices::Service::Login(::grpc::ServerContext* context, const ::tinychat::LoginArg* request, ::tinychat::LoginReply* response) {
    (void) context;
    (void) request;
    (void) response;
    return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EpollServices::Service::SignUp(::grpc::ServerContext* context, const ::tinychat::SignUpArg* request, ::tinychat::SignUpReply* response) {
    (void) context;
    (void) request;
    (void) response;
    return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EpollServices::Service::CreateGroup(::grpc::ServerContext* context, const ::tinychat::CreateGroupArg* request, ::tinychat::CreateGroupReply* response) {
    (void) context;
    (void) request;
    (void) response;
    return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EpollServices::Service::QueryUsername(::grpc::ServerContext* context, const ::tinychat::QueryUsernameArg* request, ::tinychat::QueryUsernameReply* response) {
    (void) context;
    (void) request;
    (void) response;
    return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EpollServices::Service::ChangeGroup(::grpc::ServerContext* context, const ::tinychat::ChangeGroupArg* request, ::tinychat::ChangeGroupReply* response) {
    (void) context;
    (void) request;
    (void) response;
    return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EpollServices::Service::JoinGroup(::grpc::ServerContext* context, const ::tinychat::JoinGroupArg* request, ::tinychat::JoinGroupReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EpollServices::Service::QueryHistory(::grpc::ServerContext* context, const ::tinychat::QueryHistoryArg* request, ::tinychat::QueryHistoryReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tinychat

